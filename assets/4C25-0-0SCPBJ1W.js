import{E as Y,K as H}from"./Exercice-DtXhjCyI.js";import{h as P}from"./gestionInteractif-DujZpSu8.js";import{p as W}from"./qcm-BQR8Ns0N.js";import{r as X}from"./questionMathLive-DdRvWqlN.js";import{g as Z,y as Q,a2 as u,by as I,d as w,r as R,aq as K,bz as S,bA as T,m as p,t as N,l as ee}from"./embellissements-BYV7mIDn.js";import{p as re,a as ne,b as te}from"./Personne-DRrbQFAY.js";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"katex";import"mathjs";import"crypto-js";import"seedrandom";import"decimal.js";import"./comparisonFunctions-B45ZZ3C7.js";import"./compute-engine.min.umd-BwAhpA7x.js";import"./Hms-u2AUyU1C.js";import"./ListeDeroulanteElement-CXmzV-cr.js";import"./tableauMathlive-xx-nDjq0.js";import"./canStore-DaSrd7sp.js";import"./generalStore-C3E9FHtR.js";import"earcut";import"roughjs";import"./sizeTools-DfTC1Dgv.js";import"./time-DMC-jnVL.js";import"./AjouteTableauMathlive-Bz24QHd3.js";const ye="Résoudre des problèmes additifs et de comparaison sur les fractions",Re="21/05/2025",Ne=!0,Oe="mathLive",je="9db08",Ie={"fr-fr":["4C25-0"],"fr-ch":["9NO15-3"]};class we extends Y{constructor(){super(),this.besoinFormulaireTexte=["Type de problèmes",`Nombres séparés par des tirets :
1: Triathlon (3 fractions)
2 : Élection (3 fractions)
3 : Mandala (4 fractions)
4 : Jardin (4 fractions)
5 : Stade (4 fractions)
6 : Mélange`],this.besoinFormulaire2CaseACocher=["Avec dénominateur(s) multiple(s) du plus petit"],this.sup="6",this.sup2=!1,this.nbQuestions=3,this.spacing=2,this.spacingCorr=3}nouvelleVersion(){this.consigne=this.interactif?"":this.nbQuestions>1?"Justifier vos réponses aux problèmes suivants.":"Justifier votre réponse au problème suivant.";const C=Z({saisie:this.sup,min:1,max:5,melange:6,defaut:1,nbQuestions:this.nbQuestions}).map(Number),O=[[40,20,4,10,5,8],[60,30,3,20,4,15,5,12,6,10],[80,40,4,20,5,16,8,10],[100,50,25,20,10,5],[64,8,32,16,4],[54,9,6,27,18]],_=Array.from({length:O.length},(m,D)=>D);let j=Q(_),d,x,l,a,s,c,e=[],r=[],A,L,E,J,F,h,v,V,n,t,i,M;for(let m=0,D,B,k=0;m<this.nbQuestions&&k<50;){if(j.length===0&&(j=Q(Array.from({length:O.length},(q,g)=>g))),C[m]<3){r=[];const q=O[Number(j.pop())];n=u(1,2),t=u(1,2),i=u(1,2);let g=0;for(;g<50&&(n.num===t.num||n.num===i.num||t.num===i.num||n.den===t.den||n.superieurLarge(u(1,2))||t.superieurLarge(u(1,2))||this.sup2&&(I(w(Math.max(n.den,t.den)/Math.min(n.den,t.den)))!==0||Math.max(n.den,t.den)/Math.min(n.den,t.den)>11));)g++,[F,h]=Q(q).slice(0,2).sort((G,U)=>G-U),A=R(Math.ceil(F/4),Math.floor(F/2)),L=R(Math.ceil(h/4),Math.floor(h/2)),E=F*h-A*h-L*F,v=F*h,n=u(A,F).simplifie(),t=u(L,h).simplifie(),i=u(E,v).simplifie();[n,t]=Q([n,t]),r.push({prenoms:[re()],fractions:[n,"VTT",t,"ski de fond",i,"course à pied"],enonce:"",question:(this.interactif?K(0):"")+"Pour quelle discipline, la distance parcourue est-elle la plus grande ?",correction:"",question2:"Classer, par ordre croissant, les fractions respectives associées à chaque discipline."});const[o,y,b]=ne(3);r.push({prenoms:[],fractions:[n,o,t,y,i,b],enonce:"",question:"Qui a été élue ?",correction:"",question2:"Classer, par ordre croissant, les proportions des suffrages associées à chaque candidate."});const z=new Date().getFullYear();r[0].enonce+="Le triathlon des neiges de la vallée des loups comprend trois épreuves qui s'enchaînent : VTT, ski de fond et course à pied.",r[0].enonce+=`<br>${r[0].prenoms[0]}, un passionné de cette épreuve, s'entraîne régulièrement sur le même circuit. `,r[0].enonce+=`<br>À chaque entraînement, il parcourt le circuit de la façon suivante : $${r[0].fractions[0].texFraction}$ en ${r[0].fractions[1]}, `,r[0].enonce+=`$${r[0].fractions[2].texFraction}$ en ${r[0].fractions[3]} et le reste en ${r[0].fractions[5]}.`,r[1].enonce=`À l'élection de Miss Math ${z}, ${r[1].fractions[1]} a remporté $${r[1].fractions[0].texFraction}$ des suffrages, `,r[1].enonce+=`${r[1].fractions[3]} $${r[1].fractions[2].texFraction}$ et `,r[1].enonce+=`${r[1].fractions[5]} tous les autres.`,d=S(n,t,i),a=T(d.listeMemeDenominateur),s=T(d.listeRangeeMemeDenominateur),c=T(d.listeRangee),l=d.listeMemeDenominateur[0].den;for(let $=0;$<2;$++)r[$].correction="Il s'agit d'un problème additif. Il va être nécessaire de réduire les fractions au même dénominateur pour les additionner, les soustraire ou les comparer.<br>",d.liste[0].den===d.liste[1].den?r[$].correction+="Les fractions de l'énoncé ont déjà le même dénominateur.<br>":(r[$].correction+="Réduisons les fractions de l'énoncé au même dénominateur :  ",r[$].correction+=`$${d.liste[0].texFraction}$ `,d.liste[0].den!==l?r[$].correction+=`$= ${d.listeMemeDenominateur[0].texFraction}$ et `:r[$].correction+=" et ",r[$].correction+=`$${d.liste[1].texFraction}$ `,d.liste[1].den!==l?r[$].correction+=`$= ${d.listeMemeDenominateur[1].texFraction}$.<br>`:r[$].correction+=".<br>");r[0].correction+="Calculons d'abord la distance en ",r[1].correction+="Calculons d'abord la proportion des suffrages remportés par ";for(let $=0;$<2;$++)r[$].correction+=`${r[$].fractions[5]} : <br>`,r[$].correction+=`$1-${r[$].fractions[0].texFraction}-${r[$].fractions[2].texFraction} = `,r[$].correction+=`${u(l,l).texFraction}-${d.listeMemeDenominateur[0].texFraction}-${d.listeMemeDenominateur[1].texFraction} = `,r[$].correction+=`\\dfrac{${l}-${d.listeMemeDenominateur[0].num}-${d.listeMemeDenominateur[1].num}}{${l}} = `,r[$].correction+=`${u(l-d.listeMemeDenominateur[0].num-d.listeMemeDenominateur[1].num,l).texFraction}`,l!==i.den?r[$].correction+=` = ${r[$].fractions[4].texFraction}$`:r[$].correction+="$";r[0].correction+=`<br>${r[0].prenoms[0]} fait donc $${r[0].fractions[0].texFraction}$ en ${r[0].fractions[1]}, `,r[0].correction+=`$${r[0].fractions[2].texFraction}$ en ${r[0].fractions[3]} et `,r[0].correction+=`$${r[0].fractions[4].texFraction}$ en ${r[0].fractions[5]}.`,r[0].correction+="<br> Avec les mêmes dénominateurs pour pouvoir comparer, ",r[0].correction+=`${r[0].prenoms[0]} fait donc $${a[0].texFraction}$ en ${r[0].fractions[1]}, `,r[0].correction+=`$${a[1].texFraction}$ en ${r[0].fractions[3]} et `,r[0].correction+=`$${a[2].texFraction}$ en ${r[0].fractions[5]}.`,r[0].correction+=`<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $${s[0].texFraction}$ < $${s[1].texFraction}$ < $${s[2].texFraction}$.`,r[0].correction+=`<br>Enfin, nous pouvons ranger les fractions de l'énoncé et la fraction calculée dans l'ordre croissant : $${p(c[0].texFraction)}$ < $${p(c[1].texFraction)}$ < $${p(c[2].texFraction)}$.`,r[0].correction+=`<br> 
                      C'est donc en ${N(`${r[0].fractions[r[0].fractions.indexOf(c[2])+1]}`)} que ${r[0].prenoms[0]} fait la plus grande distance.`,r[1].correction+=`<br>${r[1].fractions[1]} a donc remporté $${r[1].fractions[0].texFraction}$ des sufffrages, `,r[1].correction+=`${r[1].fractions[3]} a remporté $${r[1].fractions[2].texFraction}$ des sufffrages et `,r[1].correction+=`${r[1].fractions[5]} $${r[1].fractions[4].texFraction}$ des sufffrages.`,r[1].correction+="<br> Avec les mêmes dénominateurs pour pouvoir comparer, ",r[1].correction+=`${r[1].fractions[1]} remporte donc $${a[0].texFraction}$, `,r[1].correction+=`${r[1].fractions[3]} $${a[1].texFraction}$ et `,r[1].correction+=`${r[1].fractions[5]} $${a[2].texFraction}$.`,r[1].correction+=`<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $${s[0].texFraction}$, $${s[1].texFraction}$, $${s[2].texFraction}$.`,r[1].correction+=`<br>Enfin, nous pouvons ranger les fractions de l'énoncé et la fraction calculée dans l'ordre croissant : $${p(c[0].texFraction)}$ < $${p(c[1].texFraction)}$ < $${p(c[2].texFraction)}$.`,r[1].correction+=`<br> 
                      C'est donc ${N(`${r[1].fractions[r[1].fractions.indexOf(c[2])+1]}`)} qui a été élue.`}else{e=[];const q=O[Number(j.pop())];n=u(1,3),t=u(1,3),i=u(1,3),M=u(1,3);let g=0;for(;g<100&&(n.num===t.num||n.num===i.num||n.num===M.num||t.num===i.num||t.num===M.num||i.num===M.num||n.den===t.den||n.superieurLarge(u(1,3))||t.superieurLarge(u(1,3))||i.superieurLarge(u(1,3))||this.sup2&&(I(w(Math.max(n.den,t.den)/Math.min(n.den,t.den)))!==0||I(w(Math.max(n.den,i.den)/Math.min(n.den,i.den)))!==0||I(w(Math.max(i.den,t.den)/Math.min(i.den,t.den)))!==0||Math.max(n.den,t.den)/Math.min(n.den,t.den)>13||Math.max(n.den,i.den)/Math.min(n.den,i.den)>13||Math.max(i.den,t.den)/Math.min(i.den,t.den)>13)||!this.sup2&&(n.den===i.den||t.den===i.den));)g++,[F,h,v]=Q(q).slice(0,3).sort((y,b)=>y-b),A=F===2?1:R(Math.ceil(F/6),Math.floor(F/3)),L=R(Math.ceil(h/6),Math.floor(h/3)),E=R(Math.ceil(v/6),Math.floor(v/3)),J=F*h*v-A*h*v-L*F*v-E*F*h,V=F*h*v,n=u(A,F).simplifie(),t=u(L,h).simplifie(),i=u(E,v).simplifie(),M=u(J,V).simplifie();[n,t,i]=Q([n,t,i]),e.push({prenoms:[te()],fractions:[n,"carmin",t,"ocre jaune",i,"turquoise",M,"pourpre"],enonce:"",question:"Quelle est la couleur qui recouvre le plus de surface ?",correction:"",question2:"Classer, par ordre croissant, les fractions associées à chaque couleur."}),e.push({prenoms:[],fractions:[n,"la culture des légumes",t,"la culture des plantes aromatiques",i,"une serre servant aux semis",M,"la culture des fraisiers"],enonce:"",question:"Quelle est la culture qui occupe le plus de surface ?",correction:"",question2:"Classer, par ordre croissant, les fractions associées à chaque culture."}),e.push({prenoms:[],fractions:[n,"le pays organisateur",t,"l'ensemble des supporters des deux équipes en jeu",i,"les sponsors et officiels",M,"les places en vente libre"],enonce:"",question:"Quelle est la catégorie la plus importante dans le stade ?",correction:"",question2:"Classer, par ordre croissant, les fractions associées à chaque catégorie dans le stade."}),e[0].enonce=`${e[0].prenoms[0]} colorie un mandala selon les proportions suivantes :  $${e[0].fractions[0].texFraction}$ en ${e[0].fractions[1]}, `,e[0].enonce+=`$${e[0].fractions[2].texFraction}$ en  ${e[0].fractions[3]}, `,e[0].enonce+=`$${e[0].fractions[4].texFraction}$ en  ${e[0].fractions[5]} et `,e[0].enonce+=`le reste en ${e[0].fractions[7]}.`,e[1].enonce=`Un jardin est aménagé selon les proportions suivantes :  $${e[1].fractions[0].texFraction}$ par ${e[1].fractions[1]}, `,e[1].enonce+=`$${e[1].fractions[2].texFraction}$ par  ${e[1].fractions[3]}, `,e[1].enonce+=`$${e[1].fractions[4].texFraction}$ par  ${e[1].fractions[5]} et `,e[1].enonce+=`le reste par ${e[1].fractions[7]}.`,e[2].enonce=`Pour chaque match, les places du stade sont mises en vente dans les proportions suivantes :  $${e[2].fractions[0].texFraction}$ pour ${e[2].fractions[1]}, `,e[2].enonce+=`$${e[2].fractions[2].texFraction}$ pour  ${e[2].fractions[3]}, `,e[2].enonce+=`$${e[2].fractions[4].texFraction}$ pour  ${e[2].fractions[5]} et `,e[2].enonce+=`le reste pour ${e[2].fractions[7]}.`,x=S(n,t,i,M),a=T(x.listeMemeDenominateur),s=T(x.listeRangeeMemeDenominateur),c=T(x.listeRangee),l=x.listeMemeDenominateur[0].den;for(let o=0;o<3;o++)e[o].correction="Il s'agit d'un problème additif. Il va être nécessaire de réduire les fractions au même dénominateur pour les additionner, les soustraire ou les comparer.<br>",x.liste[0].den===l&&x.liste[1].den===l&&x.liste[2].den===l?e[o].correction+="Les fractions de l'énoncé ont déjà le même dénominateur.":(e[o].correction+="Réduisons les fractions de l'énoncé au même dénominateur :  ",e[o].correction+=`$${x.liste[0].texFraction}$ `,x.liste[0].den!==l?e[o].correction+=`$= ${x.listeMemeDenominateur[0].texFraction}$ ; `:e[o].correction+=" ; ",e[o].correction+=`$${x.liste[1].texFraction}$ `,x.liste[1].den!==l?e[o].correction+=`$= ${x.listeMemeDenominateur[1].texFraction}$ et `:e[o].correction+=" et ",e[o].correction+=`$${x.liste[2].texFraction}$ `,x.liste[2].den!==l?e[o].correction+=`$= ${x.listeMemeDenominateur[2].texFraction}$.<br>`:e[o].correction+=".<br>");e[0].correction+="Calculons d'abord la fraction du mandala recouverte en ",e[1].correction+="Calculons d'abord la fraction du jardin occupée par ",e[2].correction+="Calculons d'abord la fraction du stade occupée par ";for(let o=0;o<3;o++)e[o].correction+=`${e[o].fractions[5]} : <br>`,e[o].correction+=`$1-${e[o].fractions[0].texFraction}-${e[o].fractions[2].texFraction}-${e[o].fractions[4].texFraction} = `,e[o].correction+=`\\dfrac{${l}}{${l}}-${a[0].texFraction}-${a[1].texFraction}-${a[2].texFraction} = `,e[o].correction+=`\\dfrac{${l}-${a[0].num}-${a[1].num}-${a[2].num}}{${l}} = `,e[o].correction+=`${a[3].texFraction}`,a[3].den!==e[o].fractions[6].den?e[o].correction+=` = ${e[o].fractions[6].texFraction}$`:e[o].correction+="$";e[0].correction+=`<br>Le mandala est donc colorié de la façon suivante : $${e[0].fractions[0].texFraction}$ en ${e[0].fractions[1]}, `,e[0].correction+=`$${e[0].fractions[2].texFraction}$ en ${e[0].fractions[3]}, `,e[0].correction+=`$${e[0].fractions[4].texFraction}$ en ${e[0].fractions[5]} et `,e[0].correction+=`$${e[0].fractions[6].texFraction}$ en ${e[0].fractions[7]}.`,e[0].correction+="<br> Avec les mêmes dénominateurs pour pouvoir comparer, ",e[0].correction+=`le mandala est donc colorié de la façon suivante : $${a[0].texFraction}$ en ${e[0].fractions[1]}, `,e[0].correction+=`$${a[1].texFraction}$ en ${e[0].fractions[3]}, `,e[0].correction+=`$${a[2].texFraction}$ en ${e[0].fractions[5]} et `,e[0].correction+=`$${a[3].texFraction}$ en ${e[0].fractions[7]}.`,e[0].correction+=`<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $${s[0].texFraction}$, $${s[1].texFraction}$, $${s[2].texFraction}$, $${s[3].texFraction}$.`,e[0].correction+=`<br>Enfin, nous pouvons ranger les fractions de l'énoncé et la fraction calculée dans l'ordre croissant : $${p(c[0].texFraction)} < ${p(c[1].texFraction)} < ${p(c[2].texFraction)} < ${p(c[3].texFraction)}$.`,e[0].correction+=`<br> 
                      C'est donc en ${N(`${e[0].fractions[e[0].fractions.indexOf(c[3])+1]}`)} que le mandala est le plus recouvert.`,e[1].correction+=`<br>Le jardin est donc occupé de la façon suivante : $${e[1].fractions[0].texFraction}$ par ${e[1].fractions[1]}, `,e[1].correction+=`$${e[1].fractions[2].texFraction}$ par ${e[1].fractions[3]}, `,e[1].correction+=`$${e[1].fractions[4].texFraction}$ par ${e[1].fractions[5]} et `,e[1].correction+=`$${e[1].fractions[6].texFraction}$ par ${e[1].fractions[7]}.`,e[1].correction+="<br> Avec les mêmes dénominateurs pour pouvoir comparer, ",e[1].correction+=`le jardin est donc occupé de la façon suivante : $${a[0].texFraction}$ par ${e[1].fractions[1]}, `,e[1].correction+=`$${a[1].texFraction}$ par ${e[1].fractions[3]}, `,e[1].correction+=`$${a[2].texFraction}$ par ${e[1].fractions[5]} et `,e[1].correction+=`$${a[3].texFraction}$ par ${e[1].fractions[7]}.`,e[1].correction+=`<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $${s[0].texFraction}$, $${s[1].texFraction}$, $${s[2].texFraction}$, $${s[3].texFraction}$.`,e[1].correction+=`<br>Enfin, nous pouvons ranger les fractions de l'énoncé et la fraction calculée dans l'ordre croissant : $${p(c[0].texFraction)} < ${p(c[1].texFraction)} < ${p(c[2].texFraction)} < ${p(c[3].texFraction)}$.`,e[1].correction+=`<br> 
                      C'est donc par ${N(`${e[1].fractions[e[1].fractions.indexOf(c[3])+1]}`)} que le jardin est le plus occupé.`,e[2].correction+=`<br>Le stade est donc occupé de la façon suivante : $${e[2].fractions[0].texFraction}$ pour ${e[2].fractions[1]}, `,e[2].correction+=`$${e[2].fractions[2].texFraction}$ pour ${e[2].fractions[3]}, `,e[2].correction+=`$${e[2].fractions[4].texFraction}$ pour ${e[2].fractions[5]} et `,e[2].correction+=`$${e[2].fractions[6].texFraction}$ pour ${e[2].fractions[7]}.`,e[2].correction+="<br> Avec les mêmes dénominateurs pour pouvoir comparer, ",e[2].correction+=`le stade est donc occupé de la façon suivante : $${a[0].texFraction}$ pour ${e[2].fractions[1]}, `,e[2].correction+=`$${a[1].texFraction}$ pour ${e[2].fractions[3]}, `,e[2].correction+=`$${a[2].texFraction}$ pour ${e[2].fractions[5]} et `,e[2].correction+=`$${a[3].texFraction}$ pour ${e[2].fractions[7]}.`,e[2].correction+=`<br>Nous pouvons alors ranger ces fractions dans l'ordre croissant : $${s[0].texFraction}$, $${s[1].texFraction}$, $${s[2].texFraction}$, $${s[3].texFraction}$.`,e[2].correction+=`<br>Enfin, nous pouvons ranger les fractions de l'énoncé et la fraction calculée dans l'ordre croissant : $${p(c[0].texFraction)} < ${p(c[1].texFraction)} < ${p(c[2].texFraction)} < ${p(c[3].texFraction)}$.`,e[2].correction+=`<br> 
                      C'est donc pour ${N(`${e[2].fractions[e[2].fractions.indexOf(c[3])+1]}`)}  que le nombre de places est le plus important.`}const f=C[m]<3?r[C[m]-1]:e[C[m]-3];if(D=`${f.enonce} <br> ${f.question}<br>`,B=`${f.correction}`,this.interactif){const q=C[m]>2?3:2,g=[{texte:f.fractions[1],statut:`${f.fractions[f.fractions.indexOf(c[q])+1]}`===f.fractions[1]},{texte:f.fractions[3],statut:`${f.fractions[f.fractions.indexOf(c[q])+1]}`===f.fractions[3]},{texte:f.fractions[5],statut:`${f.fractions[f.fractions.indexOf(c[q])+1]}`===f.fractions[5]}];C[m]>2&&g.push({texte:f.fractions[7],statut:`${f.fractions[f.fractions.indexOf(c[q])+1]}`===f.fractions[7]});const o=`${f.question2}`;this.autoCorrection[2*m]={propositions:g};const y=W(this,2*m);D+=y.texte,D+=K(1)+o,D+="<br>"+X(this,2*m+1,"%{champ1}~<~%{champ2}~<~%{champ3}"+(C[m]>2?"~<~%{champ4}":""),` ${H.clavierDeBaseAvecFraction}`),P(this,2*m+1,C[m]<3?{bareme:b=>[b[0]*b[1]*b[2],3],champ1:{value:s[0].texFraction},champ2:{value:s[1].texFraction},champ3:{value:s[2].texFraction}}:{bareme:b=>[3*(b[0]*b[1]*b[2]*b[3]),3],champ1:{value:s[0].texFraction},champ2:{value:s[1].texFraction},champ3:{value:s[2].texFraction},champ4:{value:s[3].texFraction}})}this.questionJamaisPosee(m,B)&&(this.listeQuestions[m]=D,this.listeCorrections[m]=B,m++),k++}ee(this)}}export{Re as dateDeModifImportante,we as default,Ne as interactifReady,Oe as interactifType,Ie as refs,ye as titre,je as uuid};
