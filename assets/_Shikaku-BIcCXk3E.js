import{C as n,ct as u,o as c,D as m,y as p,r as h,p as f,A as d,aU as g}from"./embellissements-BYV7mIDn.js";import{g as x}from"./reperes-WwrVcExd.js";import"mathjs";import"decimal.js";import"katex";import"earcut";import"roughjs";function M(o,t=""){const i=[];for(let e=0;e<o.length;e+=2)i.push(f(o[e],o[e+1]));const a=d(...i);return typeof t=="string"&&t.length>=i.length&&g(a,t),a}class w{largeur;hauteur;aireTotale;marqueurs;dimMax;pavage;dimPossibles;constructor(t,i){this.largeur=t,this.hauteur=i,this.aireTotale=t*i,this.marqueurs=[];for(let e=0;e<t;e++){this.marqueurs[e]=[];for(let s=0;s<i;s++)this.marqueurs[e][s]=!1}this.dimMax={xMax:Math.min(t,Math.ceil(Math.sqrt(this.aireTotale))),yMax:Math.min(i,Math.ceil(Math.sqrt(this.aireTotale)))},this.pavage={aireTotale:0,rectangles:[]},this.dimPossibles=[];const a=Math.ceil(2*Math.sqrt(this.aireTotale));for(let e=1;e<=this.dimMax.xMax;e++)for(let s=1;s<=this.dimMax.yMax;s++)e*s<a&&this.dimPossibles.push([e,s]);this.paver()}paver(){this.pavage.aireTotale<this.aireTotale&&(this.ajouteUnRectangle(),this.paver())}represente(t){const i=[];i.push(x(0,0,this.largeur,this.hauteur));for(let e=0;e<this.pavage.rectangles.length;e++){const s=this.pavage.rectangles[e];if(i.push(n(s.aire,s.placeNom.x+s.x+.5,s.placeNom.y+s.y+.5)),t==="solution"){const r=new u({xMin:s.x,yMin:s.y,xMax:s.x+s.largeur,yMax:s.y+s.hauteur}).addColor({color:"blue"});i.push(r.render())}}const a=M([0,0,this.largeur,0,this.largeur,this.hauteur,0,this.hauteur]);return i.push(a),c(Object.assign({},m(i),{scale:.75}),i)}ajouteUnRectangle(){this.dimPossibles=p(this.dimPossibles);let t=!1,i=0;do{const a=this.dimPossibles[i][0],e=this.dimPossibles[i][1];t=this.trouvePlace(a,e),i++}while(!t&&i<this.dimPossibles.length);if(t){this.pavage.rectangles.push(t);for(let a=0;a<t.largeur;a++)for(let e=0;e<t.hauteur;e++)this.marqueurs[t.x+a][t.y+e]=!0;this.pavage.aireTotale+=t.aire}}trouvePlace(t,i){let a=0,e,s;do if(a+t<=this.largeur){e=0;do if(e+i<=this.hauteur){if(!this.marqueurs[a][e]){s=!1;for(let r=0;r<t;r++)for(let l=0;l<i;l++)(this.marqueurs[a+r][e+l]||a+r>=this.largeur||e+l>=this.hauteur)&&(s=!0);if(!s){const r=this.choisitPlaceNom(t,i);return{x:a,y:e,largeur:t,hauteur:i,aire:t*i,placeNom:r}}}e++}else e++;while(e<this.hauteur);a++}else a++;while(a<this.largeur);return!1}choisitPlaceNom(t,i){(t<1||i<1)&&window.notify("erreur de largeur ou de hauteur dans choisitPlaceNom(Shikaku)",{largeur:t,hauteur:i});const a=t<=1?0:h(0,t-1),e=i<=1?0:h(0,i-1);return{x:a,y:e}}}export{w as default,M as flatArrayToPolygone};
