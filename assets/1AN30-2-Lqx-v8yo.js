import{E as ce,K as pe}from"./Exercice-DtXhjCyI.js";import{h as we}from"./gestionInteractif-DujZpSu8.js";import{p as ae}from"./qcm-BQR8Ns0N.js";import{a as ue}from"./questionMathLive-DdRvWqlN.js";import{E as l,M as p,F as K,P as J,S as G,A as R}from"./Calcul-C5YSlHcO.js";import{g as $e,r,an as a,a as X,d as me,m as he,l as fe}from"./embellissements-BYV7mIDn.js";import{T as e}from"./Trinome-CS3WnuMQ.js";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"katex";import"mathjs";import"crypto-js";import"seedrandom";import"decimal.js";import"./comparisonFunctions-B45ZZ3C7.js";import"./compute-engine.min.umd-BwAhpA7x.js";import"./Hms-u2AUyU1C.js";import"./ListeDeroulanteElement-CXmzV-cr.js";import"./tableauMathlive-xx-nDjq0.js";import"./canStore-DaSrd7sp.js";import"./generalStore-C3E9FHtR.js";import"earcut";import"roughjs";import"./sizeTools-DfTC1Dgv.js";import"./time-DMC-jnVL.js";import"./AjouteTableauMathlive-Bz24QHd3.js";const Be="Simplifier des expressions exponentielles",Ge="02/07/2024",He="20/10/2025",Ue=!0,We=["qcm","mathLive"],Xe="cb7d9",Ye={"fr-fr":["1AN30-2"],"fr-ch":[]};class Ze extends ce{can;constructor(){super(),this.can=!1,this.nbQuestions=7,this.spacing=1.5,this.spacingCorr=2,this.sup=1,this.sup2=8,this.besoinFormulaireNumerique=["Niveaux de difficulté",3,`1 : Exposants entiers
2 : Exposants de la forme ax
3 : Exposants de la forme ax + b`],this.besoinFormulaire2Texte=["Types de calculs",`Nombres séparés par des tirets : 
1 : Produit
2 : Puissance
3 : Produit et puisances
4 : Distributivité simple
5 : Différence de puissance et de produit 
6 : Fraction et puissance
7 : Fraction et produit
8 : Mélange`],this.besoinFormulaire3CaseACocher=["Interactif avec QCM",!1],this.comment="7 types de calculs différents. Le résultat peut être une exponentielle ou une somme de deux exponentiels",this.listeAvecNumerotation=!1}nouvelleVersion(){this.consigne=this.nbQuestions>1?"Simplifier les expressions suivantes.":"Simplifier l'expression suivante.",this.interactifType=this.sup3?"qcm":"mathLive";const te=$e({saisie:this.sup2,min:1,max:7,defaut:1,melange:8,nbQuestions:this.nbQuestions,listeOfCase:["mul","pow","powTimesPow","k(a+b)","(e^mx)p - e^nx * e^ox","fracPowNum","fracMulNum"]});this.consigne=this.nbQuestions>1?"Simplifier les expressions suivantes.":"Simplifier l'expression suivante.",this.sup>=2&&(this.consigne="Soit $x$ un réel. "+this.consigne);for(let o=0,Y=0;o<this.nbQuestions&&Y<50;){let F="",A="",O="",S="",w="",D="",t=r(-5,5,[0,1]),n=r(-5,5,[0,1]),i=r(-5,5,[0,1]),u=0,y=0,E=0,f=new e(0,0,t),b=new e(0,0,n),M=new e(0,0,i),$=new e(0,0,-n),C=new e(0,0,-t),d=new e(0,0,t*n),N=new e(0,0,0),Z=new e(0,0,0);const _=new e(0,0,0),v=new l({polynome:_});this.sup!==1&&(t=r(-5,5,[0]),n=r(-5,5,[0]),i=r(-5,5,[0]),this.sup===2?(f=new e(0,t,0),b=new e(0,n,0),M=new e(0,i,0),$=new e(0,-n,0),C=new e(0,-t,0),d=new e(t*n,0,0)):(u=r(-5,5,[0]),y=r(-5,5,[0]),E=r(-5,5,[0]),f=new e(0,t,u),b=new e(0,n,y),M=new e(0,i,E),$=new e(0,-n,-y),C=new e(0,-t,-u),d=new e(t*n,t*y+n*u,y*u)));let T=new l({polynome:f}),Q=new l({polynome:b}),I=new l({polynome:M});const ne=new l({polynome:$}),se=new l({polynome:C}),ie=new l({polynome:d});switch(te[o]){case"mul":{const s=new p(T,Q);S=`$${a(o+1)} = ${s.toString()}$`,s.step!==""&&(w=`$${a(o+1)} = ${s.step}$<br>`),w+=`$${a(o+1)} = ${s.result}$`,D=s.result.toString(),this.interactifType==="qcm"&&(F=`$${new p(T,ne).result.toString()}$`,A=`$${new p(se,Q).result.toString()}$`,O=`$${new p(ie,v).result.toString()}$`);break}case"pow":{const s=r(2,4);this.sup===1?(t=r(-5,5,[0,1,s]),f=new e(0,0,t)):this.sup===2?(t=r(-5,5,[0,1,s]),f=new e(0,t,0)):(t=r(-5,5,[0,1,s]),n=r(-5,5,[0,1,s]),f=new e(0,t,n)),T=new l({polynome:f});const c=new J(T,s);if(S=`$${a(o+1)} = ${c.toString()}$`,w="",c.step!==""&&(w+=`$${a(o+1)} = ${c.step}$<br>`),w+=`$${a(o+1)} = ${c.result}$`,D=c.result.toString(),this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.sup===1?($=new e(0,0,s),C=new e(0,0,t>0?t*10+s:t*10-s),N=new e(0,0,t*X([s-1,s+1],me((t+s)/t,0)))):this.sup===2?($=new e(0,s,0),C=new e(0,t>0?t*10+s:t*10-s,0),N=new e(0,t,s)):($=new e(0,0,s),C=new e(0,t*s,n),N=new e(0,t,n*s));const m=new l({polynome:$}),x=new l({polynome:C}),k=new l({polynome:N});F=`$${new p(T,m).result.toString()}$`,A=`$${new p(x,v).result.toString()}$`,O=`$${new p(k,v).result.toString()}$`}break}case"powTimesPow":{const s=r(2,4),c=r(2,4);t=r(-5,5,[0,1]),n=r(-5,5,[0,1]),i=r(-5,5,[0,1]),u=r(-5,5,[0,1]),this.sup===1?(f=new e(0,0,t),b=new e(0,0,n)):this.sup===2?(f=new e(0,t,0),b=new e(0,n,0)):(f=new e(0,t,i),b=new e(0,n,u)),T=new l({polynome:f}),Q=new l({polynome:b});const m=new J(T,s),x=new J(Q,c),k=new p(m,x),g=new p(m.result,x.result);if(S=`$${a(o+1)} = ${k.toString()}$`,w+=`$${a(o+1)} = ${new p(m.step,x.step)}$`,w+=`<br>$${a(o+1)} = ${g}$`,w+=`<br>$${a(o+1)} = ${g.step}$`,w+=`<br>$${a(o+1)} = ${g.result}$`,D=g.result.toString(),this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.sup===1?($=new e(0,0,t+s+n+c),d=new e(0,0,t*s-n*c),N=new e(0,0,(t+n)*(s+c))):this.sup===2?($=new e(0,t+s+n+c,0),d=new e(0,t*s-n*c,0),N=new e(0,(t+n)*(s+c),0)):($=new e(0,t+s+n+c,i+s+u+c),d=new e(0,t*s-n*c,i*s-u*c),N=new e(0,(t+n)*(s+c),(i+u)*(s+c)));const P=new l({polynome:$}),q=new l({polynome:d}),h=new l({polynome:N});F=`$${new p(P,v).result.toString()}$`,A=`$${new p(q,v).result.toString()}$`,O=`$${new p(h,v).result.toString()}$`}break}case"k(a+b)":{do{const h=[];t=r(-5,5,[0,1,...h]),h.push(t),n=r(-5,5,[0,1,...h]),h.push(n),i=r(-5,5,[0,1,...h]),h.push(i),u=r(-5,5,[0,1,...h]),h.push(u),y=r(-5,5,[0,1,...h]),h.push(y),E=r(-5,5,[0,1,...h]),h.push(E)}while(n+t===1||n+i===1||t+n+i===1||t*n*i===1);this.sup===1?(f=new e(0,0,t),b=new e(0,0,n),M=new e(0,0,i)):this.sup===2?(f=new e(0,t,0),b=new e(0,n,0),M=new e(0,i,0)):(f=new e(0,t,u),b=new e(0,n,y),M=new e(0,i,E)),T=new l({polynome:f}),Q=new l({polynome:b}),I=new l({polynome:M});const s=new p(T,new R(Q,I));S=`$${a(o+1)} = ${s.toString()}$`,w=`$${a(o+1)} = `;const c=new p(T,Q),m=new p(T,I),x=new R(c,m);w+=`${x.toString()}$`;const k=c.step,g=m.step,P=new R(k,g);w+=`<br> $${a(o+1)} = ${P}$`;const q=new R(c.result,m.result);if(w+=`<br> $${a(o+1)}= ${q}$`,q.result.toString()!==q.toString()&&(w+=`<br> $${a(o+1)}= ${q.result}$`),D=q.result.toString(),this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.sup===1?($=new e(0,0,t+n+i),d=new e(0,0,t*n*i)):this.sup===2?($=new e(0,t+n+i,0),d=new e(0,t*n*i,0)):($=new e(0,t+n+i,u+y+E),d=new e(0,t*n*i,u*y*E));const h=new l({polynome:$}),z=new l({polynome:d});F=`$${new p(h,v).result.toString()}$`,A=`$${new p(z,v).result.toString()}$`,O=`$${new R(new p(Q,T).result,new p(Q,I).result).result.toString()}$`}break}case"(e^mx)p - e^nx * e^ox":{const[s,c,m,x]=X([de(),[r(2,5),r(2,5),r(2,5),r(2,5)]]);let k=new e(0,0,s),g=new e(0,0,m),P=new e(0,0,x);if(this.sup===2)k=new e(0,s,0),g=new e(0,m,0),P=new e(0,x,0);else if(this.sup===3){const L=[];t=r(-5,5,[0,1,...L]),L.push(t),n=r(-5,5,[0,1,...L]),L.push(n),i=r(-5,5,[0,1,...L]),k=new e(0,s,t),g=new e(0,m,n),P=new e(0,x,i)}const q=new l({polynome:k}),h=new l({polynome:g}),z=new l({polynome:P}),U=new J(q,c),W=new p(h,z),oe=new G(U,W),j=new G(U.result,W.result);if(S=`$${a(o+1)} = ${oe.toString()}$`,w=`$${a(o+1)} = ${U.step} - ${W.step}$`,w+=`<br>$${a(o+1)} = ${j}$`,String(j)!==String(j.result)&&(w+=`<br> $${a(o+1)} = ${j.result}$`),D=j.result.toString(),this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.sup===1?($=new e(0,0,s+c),d=new e(0,0,t*n*i)):this.sup===2?($=new e(0,t+n+i,0),d=new e(0,t*n*i,0)):($=new e(0,s,t*c),C=new e(0,m+x,n+i),d=new e(0,s*c,t*c),N=new e(m*x,m*i+x*n,n*i),Z=new e(0,s*c-m-x,t*c-n-i));const L=new l({polynome:$}),ee=new l({polynome:d});if(this.sup<3){const B=new l({polynome:_});F=`$${new p(L,B).result.toString()}$`,A=`$${new p(B,ee).result.toString()}$`,O=`$${new R(new p(h,q).result,new p(h,z).result).result.toString()}$`}else{const B=new l({polynome:C}),re=new l({polynome:N}),le=new l({polynome:Z});F=`$${new G(L,B).result.toString()}$`,A=`$${new G(ee,re).result.toString()}$`,O=`$${new p(le,v).result.toString()}$`}}break}case"fracPowNum":{const s=[];t=r(-5,5,[0,1,...s]),s.push(t),n=r(-5,5,[0,1,...s]),s.push(n),i=r(-5,5,[0,1,...s]),s.push(i),u=r(-5,5,[0,1,...s]),s.push(u),y=r(-5,5,[0,1,...s]),this.sup===1?(f=new e(0,0,t),b=new e(0,0,n)):this.sup===2?(f=new e(0,t,0),b=new e(0,n,0)):(f=new e(0,t,u),b=new e(0,n,y)),T=new l({polynome:f}),Q=new l({polynome:b});const c=new J(T,i),m=Q,x=new K(c,m);S=`$${a(o+1)} = ${x}$`;const k=new K(c.step,m);w=`$${a(o+1)} = ${k}$`;const g=new K(c.result,m);if(w+=`<br>$${a(o+1)} = ${g}$`,w+=`<br>$${a(o+1)} = ${g.step}$`,w+=`<br>$${a(o+1)} = ${g.result}$`,D=g.result.toString(),this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.sup===1?($=new e(0,0,t+i-n),C=new e(0,0,t*i+n),d=new e(0,0,t+i+n)):this.sup===2?($=new e(0,t-n,i),C=new e(0,t*n,i),d=new e(0,t+n,i)):($=new e(0,t*i-n,u*i+y),C=new e(0,t-n,u+i-y),d=new e(0,t-n,u*i-y));const P=new l({polynome:$}),q=new l({polynome:C}),h=new l({polynome:d});F=`$${new p(P,v).result.toString()}$`,A=`$${new p(q,v).result.toString()}$`,O=`$${new p(h,v).result.toString()}$`}break}case"fracMulNum":{const s=[];t=r(-5,5,[0,1,...s]),s.push(t),n=r(-5,5,[0,1,...s]),s.push(n),i=r(-5,5,[0,1,...s]),s.push(i),u=r(-5,5,[0,1,...s]),s.push(u),y=r(-5,5,[0,1,...s]),this.sup===1?(f=new e(0,0,t),b=new e(0,0,n),M=new e(0,0,i)):this.sup===2?(f=new e(0,t,0),b=new e(0,n,0),M=new e(0,i,0)):(f=new e(0,t,u),b=new e(0,n,y),M=new e(0,i,E)),T=new l({polynome:f}),Q=new l({polynome:b}),I=new l({polynome:M});const c=new p(T,Q),m=I,x=new K(c,m);S=`$${a(o+1)} = ${x}$`;const k=new K(c.step,m);w=`$${a(o+1)} = ${k}$`;const g=new K(c.result,m);if(w+=`<br>$${a(o+1)} = ${g}$`,w+=`<br>$${a(o+1)} = ${g.step}$`,w+=`<br>$${a(o+1)} = ${g.result}$`,D=g.result.toString(),this.interactifType==="qcm"){this.sup===1?($=new e(0,0,t*n-i),C=new e(0,0,t+n+i),d=new e(0,0,t*n+i)):this.sup===2?($=new e(0,t*n-i,0),C=new e(0,t+n+i,0),d=new e(0,t*n+i,0)):($=new e(0,t+n-i,u+y+E),C=new e(t*n,t*y+u*n-i,u*y-E),d=new e(0,t+n+i,u+y-E));const P=new l({polynome:$}),q=new l({polynome:C}),h=new l({polynome:d});F=`$${new p(P,v).result.toString()}$`,A=`$${new p(q,v).result.toString()}$`,O=`$${new p(h,v).result.toString()}$`}break}}if(this.interactifType==="qcm"){this.autoCorrection[o]={},this.autoCorrection[o].enonce=`${S}
`,this.autoCorrection[o].propositions=[{texte:`$${D}$`,statut:!0,feedback:"Correct !"},{texte:F,statut:!1,feedback:""},{texte:A,statut:!1,feedback:""},{texte:O,statut:!1,feedback:""}],this.autoCorrection[o].options={ordered:!1,lastChoice:4};const s=ae(this,o);S+=s.texte}S=S.replace(/e\^/g,"\\text{e}^"),w=w.replace(/e\^/g,"\\text{e}^"),this.can&&(S="Simplifier l'expression :<br>"+S),this.interactif&&this.interactifType==="mathLive"&&(S+=ue(this,o,pe.lycee,{texteAvant:" $=$ "}),we(this,o,{reponse:{value:D,options:{expressionNumerique:!0}}}));const V=w.split("=");let H=V[V.length-1];H=H.replace("$",""),w="";for(let s=0;s<V.length-1;s++)w+=V[s]+"=";w+=`$ $${he(H)}$`,this.questionJamaisPosee(o,t,n,i,u,y,E)&&(this.listeQuestions[o]=S,this.listeCorrections[o]=w,o++),Y++}fe(this)}}function de(){return X([[2,3,4,2],[2,3,5,1],[2,3,3,3],[2,4,1,7],[2,4,2,6],[2,4,3,5],[2,4,4,4],[3,3,1,8],[3,3,2,7],[3,3,3,6],[3,3,4,5]])}export{He as dateDeModifImportante,Ge as dateDePublication,Ze as default,Ue as interactifReady,We as interactifType,Ye as refs,Be as titre,Xe as uuid};
