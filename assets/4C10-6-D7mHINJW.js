import{af as N,r as u,cy as L,an as Q,t as r,l as C}from"./embellissements-BYV7mIDn.js";import{R as M}from"./Relatif-Cbr50-hq.js";import{E as O}from"./Exercice-DtXhjCyI.js";import{p as v}from"./qcm-BQR8Ns0N.js";import"mathjs";import"decimal.js";import"katex";import"earcut";import"roughjs";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"crypto-js";import"seedrandom";const K=!0,U="qcm",W=!0,X="qcmMono",Y="Multiplications et quotients de relatifs : signe avec une lettre",Z="18/09/2024",_="73187",ee={"fr-fr":["4C10-6"],"fr-ch":["10NO4-8"]};class te extends O{constructor(){super(),this.besoinFormulaireNumerique=["Niveau de difficulté",5,`1 : Multiplications
2 : Quotients 
3 : Multiplications et quotients 
4 : Multiplications avec plusieurs fois la lettre (dont puissances) 
5 : Mélange `],this.sup=3,this.correctionDetailleeDisponible=!0,this.correctionDetaillee=!1,this.spacing=2,this.nbQuestions=3}nouvelleVersion(){let P;switch(this.sup){case 1:P=[1];break;case 2:P=[2];break;case 3:P=[1,2];break;case 4:P=[3,4];break;case 5:default:P=[1,2,3,4];break}const k=N(P,this.nbQuestions);for(let l=0,p,t,c,D,S,m,x=0;l<this.nbQuestions&&x<50;){this.autoCorrection[l]={};const q=20,i=new M(u(-1,1,[0])*u(1,q),u(-1,1,[0])*u(1,q),u(-1,1,[0])*u(1,q),u(-1,1,[0])*u(1,q),u(-1,1,[0])*u(1,q)),R=["n","x","y","a","m"],o=R[u(0,R.length-1)],n=Q(l+1),f=u(-1,1,[0]),b=k[l]===1?u(3,5):u(4,6);let h=u(0,b-1);const e=i.relatifs.slice(0,b-1),g=[];for(let s=0;s<e.length;s++)g.push(L(e[s]));g.splice(h,0,o);let $="",a,d;switch(p=`Donne le signe de $ ${o} $ pour que ${n} soit ${f===-1?"négatif":"positif"}. <br>`,t=`${r("Supposons que "+o+" soit positif : ","blue")}`,k[l]){case 1:$+=`${g[0]} `;for(let s=1;s<b;s++)$+=`\\times ${g[s]}`;p+=` ${n} = $ ${$} $ <br>`,m=f===i.getSigneProduitNumber(...e)?"positif":"négatif",this.correctionDetaillee?(t+=`<br> ${i.setRegleSigneProduit(...e)}`,t+=`<br><br> Donc si ${r(o+" est positif","black")} $ ${$} $ est ${r(i.getSigneProduitString(...e),"black")}.`,t+=`<br><br> ${r("Supposons maintenant que "+o+" soit négatif : ","blue")}`,e.push(-1),t+=`<br><br> ${i.setRegleSigneProduit(...e,-1)}`,t+=`<br><br> Donc si ${r(o+" est négatif","black")} $ ${$} $ est ${r(i.getSigneProduitString(...e),"black")}.`,t+=`<br><br> ${r("Conclusion :","blue")} <br>`+r(`Il faut donc que $ ${o} $ soit ${f===i.getSigneProduitNumber(...e)?"négatif":"positif"} pour que ${n} soit ${f===-1?"négatif":"positif"}.`)):t=`Il faut que $ ${o} $ soit ${f===i.getSigneProduitNumber(...e)?"positif":"négatif"} pour que ${n} soit ${f===-1?"négatif":"positif"}.`;break;case 2:$+="\\dfrac {"+g[0],D=u(2,b-2);for(let s=1;s<D+1;s++)$+=`\\times ${g[s]}`;$+="}{"+g[D+1];for(let s=D+2;s<b;s++)$+=`\\times ${g[s]}`;$+="}",p+=` ${n} = $ ${$} $ <br>`,m=f===i.getSigneProduitNumber(...e)?"positif":"négatif",this.correctionDetaillee?(t+=`<br> ${i.setRegleSigneQuotient(...e)}`,t+=`<br><br> Donc si ${r(o+" est positif","black")} $ ${$} $ est ${r(i.getSigneProduitString(...e),"black")}.`,t+=`<br><br> ${r("Supposons maintenant que "+o+" soit négatif : ","blue")}`,e.push(-1),t+=`<br> ${i.setRegleSigneQuotient(...e)}`,t+=`<br><br> Donc si ${r(o+" est négatif","black")} $ ${$} $ est ${r(i.getSigneProduitString(...e),"black")}.`,t+=`<br><br> ${r("Conclusion :","blue")} <br>`+r(`Il faut donc que $ ${o} $ soit ${f===i.getSigneProduitNumber(...e)?"négatif":"positif"} pour que ${n} soit ${f===-1?"négatif":"positif"}.`)):t=`Il faut que $ ${o} $ soit ${f===i.getSigneProduitNumber(...e)?"positif":"négatif"} pour que ${n} soit ${f===-1?"négatif":"positif"}.`;break;case 3:a=u(-1,1,[0]),p=`Donne le signe de ${n} si $ ${o} $ est ${a===-1?"négatif":"positif"}. <br>`,t="",c=u(1,3),h=u(0,b-1);for(let s=0;s<c;s++)g.splice(h,0,o);$+=`${g[0]} `;for(let s=1;s<b+c;s++)$+=`\\times ${g[s]}`;d=`${e[0]} `;for(let s=1;s<b-1;s++)d+=`\\times ${e[s]}`;p+=` ${n} = $ ${$} $ <br>`,this.correctionDetaillee?(c===1||c===3?(t+=`On trouve ${c+1} fois le facteur $ ${o} $.<br> Or ${c+1} est pair donc leur produit sera positif.`,t+=`<br>Le signe de l'expression a donc le signe de : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quel que soit le signe de $ ${o} $.`)):(t+=`On trouve ${c+1} fois le facteur $ ${o} $. <br> Or ${c+1} est impair donc leur produit est du signe de $ ${o} $ soit ${a===-1?"négatif":"positif"}.`,a===-1?(t+=`<br>Le signe de l'expression a donc le signe opposé à : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,e.push(-1),t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`)):(t+=`<br>Le signe de l'expression a donc le signe opposé à : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`))),m=i.getSigneProduitString(...e)):(c===1||c===3?t=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quel que soit le signe de $ ${o} $.`):a===-1?(e.push(-1),t=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`)):t=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`),m=i.getSigneProduitString(...e));break;case 4:a=u(-1,1,[0]),p=`Donne le signe de ${n} si $ ${o} $ est ${a===-1?"négatif":"positif"}. <br>`,t="",S=u(2,7),h===0?$+=g[0]+"^{"+S+"}":$+=g[0];for(let s=1;s<b;s++)s===h?$+="\\times "+g[s]+"^{"+S+"}":$+="\\times "+g[s];d=`${e[0]} `;for(let s=1;s<b-1;s++)d+=`\\times ${e[s]}`;p+=` ${n} = $ ${$} $ <br>`,this.correctionDetaillee?S%2===0?(t+=`On trouve ${S} fois le facteur $ ${o} $.<br> Or ${S} est pair donc leur produit sera positif.`,t+=`<br>Le signe de l'expression a donc le signe de : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quel que soit le signe de $ ${o} $.`),m=i.getSigneProduitString(...e)):(t+=`On trouve ${S} fois le facteur $ ${o} $. <br> Or ${S} est impair donc leur produit est du signe de $ ${o} $ soit ${a===-1?"négatif":"positif"}.`,a===-1?(t+=`<br>Le signe de l'expression a donc le signe opposé à : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,e.push(-1),t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`)):(t+=`<br>Le signe de l'expression a donc le signe opposé à : $ ${d} $`,t+=`<br><br> ${i.setRegleSigneProduit(...e)}`,t+="<br><br>"+r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`)),m=i.getSigneProduitString(...e)):(S%2===0?t+=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quel que soit le signe de $ ${o} $.`):a===-1?(e.push(-1),t=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`)):t=r(`Donc ${n} est ${i.getSigneProduitString(...e)} quand $ ${o} $ est ${a===-1?"négatif":"positif"}.`),m=i.getSigneProduitString(...e));break}this.autoCorrection[l]={enonce:p,options:{ordered:!0},propositions:[{texte:"négatif",statut:m==="négatif"},{texte:"positif",statut:m==="positif"}]},p+=v(this,l).texte,this.questionJamaisPosee(l,k[l],...e)&&(this.listeQuestions[l]=p,this.listeCorrections[l]=t,l++),x++}C(this)}}export{W as amcReady,X as amcType,Z as dateDeModifImportante,te as default,K as interactifReady,U as interactifType,ee as refs,Y as titre,_ as uuid};
