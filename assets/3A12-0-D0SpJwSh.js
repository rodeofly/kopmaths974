import{e as f}from"./engrenage-BLWGcMtV.js";import{b as k}from"./colors-bl7PrqSM.js";import{s as q}from"./gestionInteractif-DujZpSu8.js";import{a as C}from"./questionMathLive-DdRvWqlN.js";import{g as I,r as h,a5 as d,aq as b,m as p,D as B,o as S,l as J,e as E}from"./embellissements-BYV7mIDn.js";import{E as V}from"./Exercice-DtXhjCyI.js";import"decimal.js";import"./comparisonFunctions-B45ZZ3C7.js";import"./compute-engine.min.umd-BwAhpA7x.js";import"./index-BUDQz6-w.js";import"mathjs";import"./Hms-u2AUyU1C.js";import"./ListeDeroulanteElement-CXmzV-cr.js";import"./tableauMathlive-xx-nDjq0.js";import"./canStore-DaSrd7sp.js";import"./generalStore-C3E9FHtR.js";import"seedrandom";import"katex";import"earcut";import"roughjs";import"./sizeTools-DfTC1Dgv.js";import"./time-DMC-jnVL.js";import"./exerciseMethods-CtbYPwln.js";import"crypto-js";import"./AjouteTableauMathlive-Bz24QHd3.js";const he=!0,fe="mathLive",ge=!0,qe="AMCOpen",Ce="Problèmes avec des engrenages",Le="05/10/2022",Te="17/01/2024",ve="6b37f",xe={"fr-fr":["3A12-0"],"fr-ch":[]};class ye extends V{constructor(){super(),this.nbQuestions=4,this.sup=1,this.sup2=!1,this.besoinFormulaireNumerique=["Niveau de difficulté",4,`1 : Calculer le nombre de dents (n tours à gauche)
2 : Calculer le nombre de dents (tourne de n dents à gauche)
3 : Calculer le nombre de tours (2 roues)
4 : Calculer le nombre de tours à droite (tourne de n dents à gauche)
5 : Synchroniser 3 roues
6 : Mélange`],this.besoinFormulaire2CaseACocher=["Arrêt de l'animation après un cycle lors de la correction"]}nouvelleVersion(y){const Q=I({min:1,max:5,defaut:1,melange:6,nbQuestions:this.nbQuestions,saisie:this.sup}),L=function(i,g){let c=`Voici la liste des premiers multiples de $${i}$ :<br>`;const m=5-d(i,g)/i%5,$=d(i,g)/i+m;for(let u=1;u<$+1;u++)c+=`$${u}\\times${i} = `,u===d(i,g)/i?(c+=p(E(u*i,0),k),c+="$ ; "):c+=`${E(u*i,0)}$ ; `,u%5===0&&u!==$&&(c+="<br>");return c+="$\\ldots$ ",c+="<br>",c},N=function(i,g,c,m){try{const $=document.querySelector(`#containerAnimRoues${i}`)?.querySelectorAll("[id^=animRoue]");if(!$)return;const u=document.querySelector(`#containerAnimRoues${i}`)?.querySelectorAll("text[id^=compteur]");u.forEach(e=>{e.textContent="0"}),m[i]?.forEach(e=>clearInterval(e)),m[i]=[],$.forEach(e=>e.beginElement()),u.forEach((e,t)=>{const a=setInterval(()=>{e.textContent=parseInt(e.textContent)+1},$[t].getAttribute("dur")*1e3);m[i]=[...m[i],a]}),c&&setTimeout(()=>{$.forEach(e=>e.endElement()),m[i]?.forEach(e=>clearInterval(e)),m[i]=[]},g*parseFloat($[0].getAttribute("dur"))*1e3)}catch($){window.notify(`${$} ... erreur dans la fonction remiseAZero()`,{intervallesId:JSON.stringify(m),numeroExercice:i,nbToursPremiereRoue:g})}};for(let i=0,g=0,c=0;i<this.nbQuestions&&g<50;g++){const m=[],$=[];let u=c,e,t,a,r,s,l,T,n="",o="",v=[],x;switch(Q[i]){case 1:do e=h(8,25),t=h(8,25,e),r=d(e,t)/e,s=d(e,t)/t;while(r>4&&s>4||r===1||s===1);n+=`La roue dentée de gauche possède $${e}$ dents (le dessin n'est pas représentatif).<br>`,n+=`Quand elle effectue $${r}$ tours, la roue de droite effectue $${s}$ tours.<br>`,n+="Combien la roue de droite possède-t-elle de dents ?",n+=C(this,u,""),n+="<br>",o+="Le nombre de dents multiplié par le nombre de tours de chaque roue doit donner le même résultat.<br>",o=`La roue de gauche effectue $${r}$ tours, donc tourne de $${r}\\times ${e}=${e*r}$ dents.<br>`,o+=`Soit $n$ le nombre de dents de la roue de droite qui effectue $${s}$ tours, on a alors : $n\\times${s} = ${e}\\times ${r} = ${e*r}$.<br>`,o+=`On en déduit que $n=\\dfrac{${e*r}}{${s}}=${t}$.<br>`,o+=`La roue de droite a donc $${p(t)}$ dents.<br>`,q(this,u,t),u++,v=f({dureeTourBase:0,module:.4},e,t),x=f({dureeTourBase:Math.ceil(20/Math.max(r,s)),module:.4,marqueurs:!0},e,t);break;case 2:do e=h(8,25),t=h(8,25,e),r=d(e,t)/e,s=d(e,t)/t;while(r>4&&s>4||r===1||s===1);n+=`La roue dentée de gauche possède $${e}$ dents (le dessin n'est pas représentatif).<br>`,n+=`Elle tourne de $${r*e}$ dents. Pendant ce temps, la roue de droite fait $${s}$ tour${s>1?"s":""}.<br>`,n+="Combien la roue de droite possède-t-elle de dents ?",n+=C(this,u,""),n+="<br>",q(this,u,t),u++,o+="Le nombre de dents multiplié par le nombre de tours de chaque roue doit donner le même résultat.<br>",o+=`La roue de gauche tourne de $${r*e}$ dents en $${r}$ tours.<br>`,o+=`Soit $n$ le nombre de dents de la roue de droite, on a alors : $n\\times${s} = ${e*r}$.<br>`,o+=`On en déduit que $n=\\dfrac{${e*r}}{${s}}=${t}$.<br>`,o+=`La roue de droite a donc $${p(t)}$ dents.<br>`,v=f({dureeTourBase:0,module:.4},e,t),x=f({dureeTourBase:Math.ceil(20/Math.max(r,s)),module:.4,marqueurs:!0},e,t);break;case 3:do e=h(8,25),t=h(8,25,e),r=d(e,t)/e,s=d(e,t)/t;while(r>4&&s>4||r===1||s===1);n+=`La roue dentée de gauche possède $${e}$ dents et celle de droite possède $${t}$ dents.<br>`,n+=`${b(0)} Au bout de combien de tours pour la roue de gauche les deux roues retrouveront leur position initiale ?<br>`,n+=`${b(1)} Combien de tours aura alors effectués la roue de droite ?`,n+=C(this,u,""),n+="<br>",q(this,u,s),u++,o+=`Lorsque la roue de gauche effectue $n$ tours, cela fait $${e}n$ dents.<br>`,o+=`Lorsque la roue de droite effectue $m$ tours, cela fait $${t}m$ dents.<br>`,o+=`Nous cherchons donc le plus petit multiple commun à $${e}$ et à $${t}$.<br>`,o+=L(e,t),o+=L(t,e),o+=`${b(0)}Il faudra donc $${p(r)}$ tours (car $${p(r)}\\times${e}=${p(e*r,k)}$) de la roue de gauche pour que les roues retrouvent leur position initiale.<br>`,o+=`${b(1)}La roue de droite aura effectué alors $${p(s)}$ tours (car $${p(s)}\\times${t}=${p(t*s,k)}$).<br>`,v=f({dureeTourBase:0,module:.4},e,t),x=f({dureeTourBase:Math.ceil(20/Math.max(r,s)),module:.4,marqueurs:!0},e,t);break;case 4:do e=h(8,25),t=h(8,25,e),r=d(e,t)/e,s=d(e,t)/t;while(r>4&&s>4||r===1||s===1);n+=`La roue dentée de gauche possède $${e}$ dents et la roue de droite en possède $${t}$ (le dessin n'est pas représentatif).<br>`,n+=`La roue de gauche tourne de $${r*e}$ dents.<br>Pendant ce temps, combien la roue de droite effectue-t-elle de tours ?`,n+=C(this,u,""),n+="<br>",q(this,u,s),u++,o+="Le nombre de dents multiplié par le nombre de tours de chaque roue doit donner le même résultat.<br>",o+=`La roue de gauche tourne de $${r*e}$ dents.<br>`,o+=`Soit $n$ le nombre de tours de la roue de droite qui a $${t}$ dents, on a alors : $n\\times${t} = ${e*r}$.<br>`,o+=`On en déduit que $n=\\dfrac{${e*r}}{${t}}=${s}$.<br>`,o+=`La roue de droite a donc effectué $${p(s)}$ tours pendant que la roue de gauche en a effectués $${r}$.<br>`,v=f({dureeTourBase:0,module:.4},e,t),x=f({dureeTourBase:Math.ceil(20/Math.max(r,s)),module:.4,marqueurs:!0},e,t);break;case 5:do e=h(8,25),t=h(8,12,e),a=h(8,25,[e,t]),r=d(e,t)/e,s=d(e,t)/t,l=d(e,a)/a,T=d(d(e,t),a)/e;while(r>4&&l>4&&s>4||r===1||l===1||s===1);v=f({dureeTourBase:0,module:.4},e,t,a),x=f({dureeTourBase:Math.ceil(20/Math.max(r,s,l)),module:.4,marqueurs:!0},e,t,a),n+=`La roue de gauche possède $${e}$ dents, celle du milieu en a $${t}$ et celle de droite en a $${a}$.<br>`,n+=`${b(0)}Combien de tours doit effectuer la roue de gauche avant que son repère et celui de la roue du milieu soient à nouveau comme dans la position initiale ?`,n+=C(this,u,""),n+="<br>",q(this,u,r),u++,n+=`${b(1)}Combien de tours doit effectuer la roue de gauche avant que son repère et celui de la roue de droite soient à nouveau comme dans la position initiale ?`,n+=C(this,u,""),n+="<br>",q(this,u,s),u++,n+=`${b(2)}`,n+=this.interactif?`Dans la situation ${b(1,!0)}, la roue du milieu n'étant pas dans sa position initiale, combien de tours la roue de gauche doit-elle effectuer pour que les trois roues retrouvent leur position initiale ?`:`Dans la situation ${b(1,!0)}, la roue du milieu est-elle dans sa position initiale ? Sinon, combien de tours la roue de gauche doit-elle effectuer pour que les trois roues retrouvent leur position initiale ?`,n+=C(this,u,""),n+="<br>",q(this,u,T),u++,o+=`${b(0)}Le nombre de dents multiplié par le nombre de tours de chaque roue doit donner le même résultat.<br>`,o+=`Nous cherchons donc le plus petit multiple commun à $${e}$ et à $${t}$.<br>`,o+=L(e,t),o+=L(t,e),o+=`Il faudra donc $${p(r)}$ tours de la roue de gauche et $${s}$ tours à la roue du milieu pour qu'elles se retrouvent dans leur position initiale.<br>`,o+=`<br>${b(1)}Faisons de même avec la roue de gauche et celle de droite.<br>`,o+=`Nous cherchons donc le plus petit multiple commun à $${e}$ et à $${a}$.<br>`,o+=L(e,a),o+=L(a,e),o+=`La roue de droite effectuera donc $${p(l)}$ tours quand la roue de gauche en effectuera $${l*a/e}$.<br>`,l!==e?o+=`En effet $${l}\\times ${a}=${l*a/e}\\times ${e}=${l*a}$.<br>`:o+=`Remarque : Quand le plus petit multiple commun de deux nombres est le produit de ces nombres, on dit qu'ils sont premiers entre eux. $${a}$ et $${e}$ sont premiers entre eux.<br>`,o+=`<br>${b(2)}Dans cette situation, la roue du milieu tourne, elle aussi, de $${l*a}$ dents.<br>`,o+=l*a%t===0?`Ce nombre est un multiple du nombre de dents de la roue du milieu, donc elle a effectué exactement $\\dfrac{${l*a}}{${t}}=${l*a/t}$ tours.<br>`:"Ce nombre n'est pas un multiple du nombre de dents de la roue du milieu, donc elle ne sera pas dans sa position initiale.<br>",o+=`Il faudra attendre que la roue de gauche tourne de $${T*e}$ dents soit $${p(T)}$ tours, la roue du milieu en fera $${T*e/t}$ et la roue de droite en fera $${T*e/a}$.<br>`}m.push(...v),$.push(...x);const O=Object.assign({},B(m),{pixelsParCm:20,scale:.75}),P=Object.assign({},B($),{pixelsParCm:20,scale:.75});n+=S(O,m);{o+=`<div id="containerAnimRoues${y}_${i}">${S(P,$)}</div>`;const _=this.sup2,M=document.createElement("button");M.innerText="Relancer l'animation",M.classList.add("px-6","py-2.5","mr-10","my-5","ml-6","bg-coopmaths","text-white","font-medium","text-xs","leading-tight","uppercase","rounded","shadow-md","transform","hover:scale-110","hover:bg-coopmaths-dark","hover:shadow-lg","focus:bg-coopmaths-dark","focus:shadow-lg","focus:outline-none","focus:ring-0","active:bg-coopmaths-dark","active:shadow-lg","transition","duration-150","ease-in-out"),M.setAttribute("id",`b_AnimRoue${y}_${i}`),o+="<br>"+M.outerHTML;const A=i,R=function(){const w=document.getElementById(`b_AnimRoue${y}_${A}`);if(w){const j={};w.onclick=function(){N(`${y}_${A}`,r,_,j)},setTimeout(function(){document.querySelector(`#containerAnimRoues${y}_${A}`)?.querySelectorAll("[id^=animRoue]").forEach(F=>F.endElement())})}};document.addEventListener("exercicesAffiches",R)}this.questionJamaisPosee(i,r,s,l,e,t,a)&&(this.listeQuestions[i]=n,this.listeCorrections[i]=o,i++,c=u)}J(this)}}export{ge as amcReady,qe as amcType,Te as dateDeModifImportante,Le as dateDePublication,ye as default,he as interactifReady,fe as interactifType,xe as refs,Ce as titre,ve as uuid};
