import{p as T}from"./qcm-BQR8Ns0N.js";import{c as q,r as s,ba as N,af as k,e as c,t as b,m as M,d,l as C}from"./embellissements-BYV7mIDn.js";import{T as Q}from"./Triangle-BVvgWVSy.js";import{E as D}from"./Exercice-DtXhjCyI.js";import"mathjs";import"decimal.js";import"katex";import"earcut";import"roughjs";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"crypto-js";import"seedrandom";const W=!0,X="qcm",Y=!0,Z="AMCHybride",_="Constructibilité des triangles via les longueurs ou les angles",ee="11/1/2025";class te extends D{constructor(){super(),this.besoinFormulaireNumerique=["Niveau de difficulté",2,`1 : 3 angles
2 : 2 angles et le 3ème en fonction du 1er ou du 2ème
3 : Mélange`],this.besoinFormulaire2CaseACocher=["Accepter triangle plat",!1],this.sup=1,this.nbQuestions=3}nouvelleVersion(){let $,A;if(this.exo==="5G21-1"?A=!this.interactif||q.isAmc?"Justifier si les longueurs données permettent de construire le triangle":"Indiquer si, avec les informations fournies, le triangle est constructible":A=!this.interactif||q.isAmc?"Justifier si les angles donnés permettent de construire le triangle":"Indiquer si, avec les informations fournies, le triangle est constructible",this.consigne=A+".",this.exo==="5G21-1")if(this.sup===1)$=[1,2,3];else if(this.sup===3){const i=s(1,3);this.nbQuestions===1?$=[4]:this.nbQuestions===2?$=[4,i]:this.nbQuestions===3?$=[4,i,i%3+1]:$=[4,1,2,3]}else $=[4];else if(this.exo==="5G31-1")if(this.sup===1)$=[5,6,7];else if(this.sup===3){const i=s(5,7);this.nbQuestions===1?$=[8]:this.nbQuestions===2?$=[8,i]:this.nbQuestions===3?$=[8,i,(i-4)%3+5]:$=[8,5,6,7]}else $=[8];else $=[1,2,3,4,5,6,7,8];this.sup2||(N($,2),N($,6));const x=k($,this.nbQuestions);for(let i=0,a,r,m,p,v,n,u,g,L=0;i<this.nbQuestions&&L<50;){const e=new Q,t=[];switch(x[i]){case 1:for(;!e.isTrueTriangleLongueurs();)m=s(2,20),p=s(2,20),v=s(2,20),e.l1=m,e.l2=p,e.l3=v;a=`${e.getNom()} tel que ${e.getLongueurs()[0]} $= ${e.l1}$ cm ; `,a+=`${e.getLongueurs()[1]} $= ${e.l2}$ cm et ${e.getLongueurs()[2]} $= ${e.l3}$ cm.`;for(let l=0;l<3;l++)t.push({longueur:e.getLongueurs()[l],cote:e.getCotes()[l],valeur:e.getLongueursValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[2].cote}, qui mesure $${t[2].valeur}$ cm, est le plus grand côté.`,r+=`<br> De plus ${t[0].longueur} + ${t[1].longueur} = $${t[0].valeur}$ cm + $${t[1].valeur}$ cm = $${d(t[0].valeur+t[1].valeur)}$ cm.`,r+=`<br> On constate que  ${t[2].longueur} < ${t[0].longueur} + ${t[1].longueur}.`,r+=`<br> L'inégalité triangulaire est vérifiée donc ${b(`le triangle ${e.getNom()} est constructible`)}.`;break;case 2:do m=s(2,20),p=s(2,20),v=d(m+p),e.l1=m,e.l2=p,e.l3=v;while(!e.isPlatTriangleLongueurs());a=`${e.getNom()} tel que ${e.getLongueurs()[0]} $ = ${e.l1}$ cm ; `,a+=`${e.getLongueurs()[1]} $= ${e.l2}$ cm et ${e.getLongueurs()[2]} $= ${e.l3}$ cm.`;for(let l=0;l<3;l++)t.push({longueur:e.getLongueurs()[l],cote:e.getCotes()[l],valeur:e.getLongueursValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[2].cote}, qui mesure $${t[2].valeur}$ cm, est le plus grand côté.`,r+=`<br> De plus ${t[0].longueur} + ${t[1].longueur} = $${t[0].valeur}$ cm + $${t[1].valeur}$ cm = $${t[2].valeur}$ cm aussi.`,r+=`<br> Les points ${e.stringSommets} sont donc alignés. ${b("On peut donc construire le triangle ")}$${M(e.getNom().substring(1,e.getNom().length-1))}$${b(", c'est un triangle plat.")}`;break;case 3:for(m=s(2,20),p=s(2,20),v=s(2,20),e.l1=m,e.l2=p,e.l3=v;e.isTrueTriangleLongueurs()||e.isPlatTriangleLongueurs();)m=s(2,20),p=s(2,20),v=s(2,20),e.l1=m,e.l2=p,e.l3=v;a=`${e.getNom()} tel que ${e.getLongueurs()[0]} $= ${e.l1}$ cm ; `,a+=`${e.getLongueurs()[1]} $= ${e.l2}$ cm et ${e.getLongueurs()[2]} $= ${e.l3}$ cm.`;for(let l=0;l<3;l++)t.push({longueur:e.getLongueurs()[l],cote:e.getCotes()[l],valeur:e.getLongueursValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[2].cote}, qui mesure $${t[2].valeur}$ cm, est le plus grand côté.`,r+=`<br> De plus ${t[0].longueur} + ${t[1].longueur} = $${t[0].valeur}$ cm + $${t[1].valeur}$ cm = $${d(t[0].valeur+t[1].valeur)}$ cm.`,r+=`<br> On constate que  ${t[2].longueur} > ${t[0].longueur} + ${t[1].longueur}.`,r+=`<br> L'inégalité triangulaire n'est pas vérifiée donc ${b(`le triangle ${e.getNom()} n'est pas constructible`)}.`;break;case 4:for(;!e.isTrueTriangleLongueurs();)m=s(2,20),p=s(2,20),v=s(2,20),e.l1=m,e.l2=p,e.l3=v;a=`${e.getNom()} tel que ${e.getLongueurs()[0]} $= ${e.l1}$ cm ; `,a+=`${e.getLongueurs()[1]} $= ${e.l2}$ cm et dont le périmètre vaut $${e.getPerimetre()}$ cm.`;for(let l=0;l<3;l++)t.push({longueur:e.getLongueurs()[l],cote:e.getCotes()[l],valeur:e.getLongueursValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`Puisque le périmètre vaut $${e.getPerimetre()}$ cm alors la troisième longueur vaut ${e.getLongueurs()[2]} = $${e.getPerimetre()}$ cm - $${e.l1}$ cm - $${e.l2}$ cm = $${e.l3}$ cm.`,r+=`<br> Donc, ${t[2].cote}, qui mesure $${t[2].valeur}$ cm, est le plus grand côté.`,r+=`<br> De plus ${t[0].longueur} + ${t[1].longueur} = $${t[0].valeur}$ cm + $${t[1].valeur}$ cm = $${d(t[0].valeur+t[1].valeur)}$ cm.`,r+=`<br> On constate que ${t[0].longueur} + ${t[1].longueur} > ${t[2].longueur}`,r+=`<br> L'inégalité triangulaire est vérifiée donc ${b(`le triangle ${e.getNom()} est constructible`)}.`;break;case 5:for(;!e.isTrueTriangleAngles();)n=s(0,180,[0,180]),u=s(0,180,[0,180]),g=d(180-n-u),e.a1=n,e.a2=u,e.a3=g;a="",r="",a=`${e.getNom()} tel que ${e.getAngles()[0]} $= ${e.a1}^\\circ$ ; `,a+=`${e.getAngles()[1]} $= ${e.a2}^\\circ$ et ${e.getAngles()[2]} $= ${e.a3}^\\circ$.`;for(let l=0;l<3;l++)t.push({angle:e.getAngles()[l],valeur:e.getAnglesValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[0].angle} + ${t[1].angle} + ${t[2].angle} = $${t[0].valeur}^\\circ + ${t[1].valeur}^\\circ + ${t[2].valeur}^\\circ = ${d(t[0].valeur+t[1].valeur+t[2].valeur)}^\\circ$.`,r+="<br> On constate que la somme des trois angles vaut bien $180^\\circ$.",r+=`<br> ${b("On peut donc construire le triangle ")}$${M(e.getNom().substring(1,e.getNom().length-1))}$.`;break;case 6:for(;!e.isPlatTriangleAngles();)n=s(0,180),u=s(0,180),g=d(180-n-u),e.a1=n,e.a2=u,e.a3=g;a="",r="",a=`${e.getNom()} tel que ${e.getAngles()[0]} $= ${e.a1}^\\circ$ ; `,a+=`${e.getAngles()[1]} $= ${e.a2}^\\circ$ et ${e.getAngles()[2]} $= ${e.a3}^\\circ$.`;for(let l=0;l<3;l++)t.push({angle:e.getAngles()[l],valeur:e.getAnglesValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[0].angle} + ${t[1].angle} + ${t[2].angle} = $${t[0].valeur}^\\circ + ${t[1].valeur}^\\circ + ${t[2].valeur}^\\circ = ${d(t[0].valeur+t[1].valeur+t[2].valeur)}^\\circ$.`,r+="<br> On constate que la somme des trois angles du triangle vaut bien $180^\\circ$.",r+=`<br> ${b("On peut donc construire le triangle ")}$${M(e.getNom().substring(1,e.getNom().length-1))}$.`,r+=`<br> Deux des trois angles du triangle valent $0^\\circ$, $${M(e.getNom().substring(1,e.getNom().length-1))}$`+b(" est donc un triangle plat.");break;case 7:for(n=s(0,180),u=s(0,180),g=s(0,180),e.a1=n,e.a2=u,e.a3=g;e.isTrueTriangleAngles();)n=s(0,180),u=s(0,180),g=s(0,180),e.a1=n,e.a2=u,e.a3=g;a=`${e.getNom()} tel que ${e.getAngles()[0]} $= ${e.a1}^\\circ$ ; `,a+=`${e.getAngles()[1]} $= ${e.a2}^\\circ$ et ${e.getAngles()[2]} $= ${e.a3}^\\circ$.`;for(let l=0;l<3;l++)t.push({angle:e.getAngles()[l],valeur:e.getAnglesValeurs()[l]});t.sort(function(l,o){return l.valeur-o.valeur}),r=`${t[0].angle} + ${t[1].angle} + ${t[2].angle} = $${t[0].valeur}^\\circ + ${t[1].valeur}^\\circ + ${t[2].valeur}^\\circ = ${d(t[0].valeur+t[1].valeur+t[2].valeur)}^\\circ$.`,r+="<br> Si le triangle était constructible, la somme des trois angles vaudrait $180^\\circ$,",r+=" or ce n'est pas le cas.",r+=`<br> ${b("On ne peut donc pas construire le triangle ")}$${M(e.getNom().substring(1,e.getNom().length-1)+".")}$`;break;case 8:{const l=s(0,1),o=["triple","quadruple","quart"];let h="";switch(a="",r="",r="",l){case 0:switch(n=s(0,180),e.a1=n,h=o[s(0,2)],a+=`${e.getNom()} tel que ${e.getAngles()[0]} $= ${c(e.a1)}^\\circ$ ; `,h){case"triple":u=(180-n)/4,g=3*u;break;case"quadruple":u=(180-n)/5,g=4*u;break;case"quart":u=4*(180-n)/5,g=u/4;break}e.a2=u,e.a3=g,a+=`${e.getAngles()[1]} $= ${c(e.a2)}^\\circ$ et ${e.getAngles()[2]} est le ${h} de ${e.getAngles()[1]}.`;for(let f=0;f<3;f++)t.push({angle:e.getAngles()[f],valeur:e.getAnglesValeurs()[f]});r+=`${t[2].angle} est le ${h} de ${t[1].angle} = $${c(t[1].valeur)}^\\circ$  d'où ${t[2].angle} = $${c(t[2].valeur)}^\\circ$.`;break;case 1:switch(u=s(0,180),e.a2=u,h=o[s(0,2)],a+=`${e.getNom()} tel que ${e.getAngles()[1]} $= ${c(e.a2)}^\\circ$ ; `,h){case"triple":n=(180-u)/4,g=3*n;break;case"quadruple":n=(180-u)/5,g=4*n;break;case"quart":n=4*(180-u)/5,g=n/4;break}e.a1=n,e.a3=g,a+=`${e.getAngles()[0]} $= ${c(e.a1)}^\\circ$ et ${e.getAngles()[2]} est le ${h} de ${e.getAngles()[0]}.`;for(let f=0;f<3;f++)t.push({angle:e.getAngles()[f],valeur:e.getAnglesValeurs()[f]});r+=`${t[2].angle} est le ${h} de ${t[0].angle} = $${c(t[0].valeur)}^\\circ$  d'où ${t[2].angle} = $${c(t[2].valeur)}^\\circ$.`;break}r+=`<br>Donc ${t[0].angle} + ${t[1].angle} + ${t[2].angle} = $${c(t[0].valeur)}^\\circ + ${c(t[1].valeur)}^\\circ + ${c(t[2].valeur)}^\\circ = ${c(t[0].valeur+t[1].valeur+t[2].valeur)}^\\circ$.`,r+="<br> On constate que la somme des trois angles vaut bien $180^\\circ$.",r+=`<br> ${b("On peut donc construire le triangle ")}$${M(e.getNom().substring(1,e.getNom().length-1))}$.`;break}}if(this.questionJamaisPosee(i,e.getNom())){const l=[{texte:`Le triangle ${e.getNom()} est constructible`,statut:!(x[i]===3||x[i]===7),feedback:this.exo==="5G21-1"?"Effectue la somme des longueurs les plus petites et compare-la à la plus grande longueur.":"Effectue la somme des angles du triangle."},{texte:`Le triangle ${e.getNom()} n'est pas constructible`,statut:x[i]===3||x[i]===7,feedback:this.exo==="5G21-1"?"Effectue la somme des longueurs les plus petites et compare-la à la plus grande longueur.":"Effectue la somme des angles du triangle."},{texte:`On ne peut pas savoir si le triangle ${e.getNom()} est constructible ou pas`,statut:!1,feedback:this.exo==="5G21-1"?"Effectue la somme des longueurs les plus petites et compare-la à la plus grande longueur.":"Effectue la somme des angles du triangle."}];this.autoCorrection[i]={enonce:a,propositions:l,options:{vertical:!0,ordered:!1,lastChoice:2}};const o=T(this,i);this.interactif&&(a+=o.texte),this.listeQuestions[i]=a,this.listeCorrections[i]=r,i++}L++}C(this)}}export{Y as amcReady,Z as amcType,ee as dateDeModifImportante,te as default,W as interactifReady,X as interactifType,_ as titre};
