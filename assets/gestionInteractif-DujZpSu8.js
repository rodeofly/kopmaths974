import w from"decimal.js";import{F as c}from"./embellissements-BYV7mIDn.js";import{G as v,f as u}from"./comparisonFunctions-B45ZZ3C7.js";import"mathjs";import"./ListeDeroulanteElement-CXmzV-cr.js";import{H as h}from"./Hms-u2AUyU1C.js";import"./tableauMathlive-xx-nDjq0.js";import"./Exercice-DtXhjCyI.js";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"crypto-js";import"seedrandom";function P(n){n.reponse={...n.reponse,param:{formatInteractif:"cliqueFigure"}}}function U(n,e,t,r={}){const l=new URL(window.location.href);if(n.formatInteractif==="qcm")return;let f=r?.formatInteractif,d=r?.precision,m=r?.signe;f===void 0&&(f="calcul");let o;if(l.hostname==="localhost"&&l.searchParams.has("triche")&&console.info(`Réponses de l'exercice ${(n.numeroExercice??0)+1} - question ${e+1} : `,t),typeof t=="object"&&(f==="tableauMathlive"||f==="fillInTheBlank"))throw Error("setReponse ne doit pas être utilisé pour tableauMathlive ni fillInTheBlank, il faut utiliser handleAnswers");Array.isArray(t)?(o=[...t],t[0]instanceof c?m=t[0].signe===-1:typeof t[0]=="number"?m=t[0]<0:m=Number(t[0])<0):(o=[t],t instanceof c?m=t.signe===-1?!0:!!m:m=Number(t)<0?!0:!!m),r.signe=m;const a=o[0];let i;if(n!=null)switch(r.formatInteractif="mathlive",f){case"listeDeroulante":{n.autoCorrection==null&&(n.autoCorrection=[]),n.autoCorrection[e]==null&&(n.autoCorrection[e]={}),n.autoCorrection[e].reponse==null&&(n.autoCorrection[e].reponse={});const s=n.autoCorrection[e].reponse;s!=null&&(s.valeur==null&&(s.valeur={}),s.valeur.reponse==null&&(s.valeur.reponse={value:""}),s.param==null&&(s.param={}),s.param.formatInteractif="listeDeroulante",Object.assign(s.valeur.reponse.value,o));return}case"Num":return a instanceof c?(Number.isNaN(a.num)||Number.isNaN(a.den))&&window.notify("setReponse : La fraction ne convient pas !",{reponses:o,exercice:n.uuid}):window.notify('setReponse : type "Num" une fraction est attendue !',{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:String(a.num),compare:u}},r);case"Den":return a instanceof c||window.notify('setReponse : type "Den" une fraction est attendue !',{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:String(a.den),compare:u}},r);case"calcul":{if(o.length===1)return i=a,typeof i=="string"&&(i=i.replaceAll("dfrac","frac").replace(/\s/g,"").replace(",",".")),p(n,e,{reponse:{value:i,compare:u}},r);const s=[];for(let g=0;g<o.length;g++)i=o[g],typeof i=="string"?i=i.replaceAll("dfrac","frac").replace(/\s/g,"").replace(",","."):typeof i=="number"?i=String(i):i instanceof c?i=i.texFraction.replaceAll("dfrac","frac"):i instanceof w&&(i=i.toString()),s.push(i);return p(n,e,{reponse:{value:s,compare:u}},r)}case"texte":return typeof a!="string"&&window.notify(`setReponse : type "texte" la réponse n'est pas un string !`,{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:Array.isArray(o)?o.map(String):String(o),compare:u,options:{texteAvecCasse:!0}}},r);case"ignorerCasse":return typeof a!="string"&&window.notify(`setReponse : type "ignorerCasse" la réponse n'est pas un string !`,{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:Array.isArray(o)?o.map(s=>String(s).toLowerCase()):String(o).toLowerCase(),compare:u,options:{texteSansCasse:!0}}},r);case"fractionEgale":if(a instanceof c?(Number.isNaN(a.num)||Number.isNaN(a.den))&&window.notify("setReponse : La fraction ne convient pas !",{reponses:o,exercice:n.uuid}):window.notify('setReponse : type "fractionEgale" une fraction est attendue !',{reponses:o,exercice:n.uuid}),Array.isArray(a)&&window.notify("setReponse a reçu une liste de réponse pour le format fractionEgale, c'est incohérent !",{reponses:o,exercice:n.uuid}),a instanceof c)return p(n,e,{reponse:{value:a,compare:u}},r);break;case"unites":if(d==null&&(d=0),a instanceof v||window.notify(`setReponse : type "longueur" la réponse n'est pas une instance de Grandeur !`,{reponses:o,exercice:n.uuid}),a instanceof v)return p(n,e,{reponse:{value:a,compare:u,options:{unite:!0,precisionUnite:10**d*10**(a.puissanceUnite*a.puissancePrefixe)}}},r);break;case"intervalleStrict":return(o.length!==2||o.filter(s=>typeof s!="number").length!==0)&&window.notify(`setReponse : type "intervalle" la réponse n'est pas un tupple [number,number] !`,{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:`]${o[0]};${o[1]}[`,compare:u,options:{estDansIntervalle:!0}}},r);case"intervalle":return(!Array.isArray(o)||o.length!==2||o.filter(s=>typeof s!="number").length!==0)&&window.notify(`setReponse : type "intervalle" la réponse n'est pas un tupple [number,number] !`,{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:`[${o[0]};${o[1]}]`,compare:u,options:{estDansIntervalle:!0}}},r);case"puissance":return typeof a!="string"&&window.notify(`setReponse : type "puissance" la réponse n'est pas un string !`,{reponses:o,exercice:n.uuid}),p(n,e,{reponse:{value:String(a),compare:u,options:{puissance:!0}}},r)}n.autoCorrection[e]===void 0&&(n.autoCorrection[e]={}),n.autoCorrection[e].reponse===void 0&&(n.autoCorrection[e].reponse={});const y=n.autoCorrection[e].reponse;y!=null&&(y.param=r,y.valeur=o)}function b(n){const e=String(n).replace(/{,}/g,"").replace(",",".");return/^[+-]?\d+(.\d+)?$/.test(e)}function C(n){for(const[,e]of Object.entries(n))if(e!==void 0){if(e?.value!==void 0)if(Array.isArray(e.value))for(let t=0;t<e.value.length;t++)typeof e.value[t]!="string"&&((e.value[t]instanceof w||e.value[t]instanceof v||e.value[t]instanceof h||typeof e.value[t]=="number")&&(e.value[t]=e.value[t].toString()),e.value[t]instanceof c&&(e.value[t]=e.value[t].texFraction));else{if(typeof e.value=="string")continue;(e.value instanceof w||e.value instanceof v||e.value instanceof h||typeof e.value=="number")&&(e.value=e.value.toString()),e.value instanceof c&&(e.value=e.value.texFraction)}if(e.compare===void 0&&(e.compare=u),e.options===void 0||Object.keys(e.options).length===0){let t;if(Array.isArray(e.value)){t=!0;for(let l=0;l<e.value.length;l++)t&&=b(e.value[l])}else t=b(e.value);const r=t?{nombreDecimalSeulement:!0}:{};e.options=r}}return n}function p(n,e,t,r={}){let l=r?.formatInteractif??n.autoCorrection[e]?.reponse?.param?.formatInteractif??"mathlive";n.autoCorrection==null&&(n.autoCorrection=[]),t instanceof Object||window.notify(`handleAnswer() reponses doit être un objet : ${t}`,{reponses:t,exercice:n.uuid}),n.autoCorrection[e]===void 0&&(n.autoCorrection[e]={}),n.autoCorrection[e].reponse===void 0&&(n.autoCorrection[e].reponse={});const f=n.autoCorrection[e].reponse;f!=null&&(f.param=r??{formatInteractif:l},l===void 0&&(l="mathlive"),f.param.formatInteractif=l,f.valeur=C(t));const d=new URL(window.location.href);d.hostname==="localhost"&&d.searchParams.has("triche")&&console.info(`Réponses de l'exercice ${(n.numeroExercice??0)+1} - question ${e+1} : `,f.valeur)}export{P as a,p as h,U as s};
