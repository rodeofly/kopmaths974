import{br as W,p as P,r as D,ai as Y,aE as V,A as j,ah as J,aG as Z,aU as G,aK as O,o as X,l as ee,b as o}from"./embellissements-BYV7mIDn.js";import{E as te}from"./Exercice-DtXhjCyI.js";import{d as ie}from"./questionMathLive-DdRvWqlN.js";import{RedactionPythagore as Q}from"./_pythagore-Dlmu9dc7.js";import{B as v,F as H,a as g,b as le,i as z,s as oe,W as ne,c as R,d as se,E as pe}from"./en-CH6AM4SJ.js";import"mathjs";import"decimal.js";import"katex";import"earcut";import"roughjs";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"crypto-js";import"seedrandom";import"./tableauMathlive-xx-nDjq0.js";import"./canStore-DaSrd7sp.js";import"./generalStore-C3E9FHtR.js";import"./comparisonFunctions-B45ZZ3C7.js";import"./compute-engine.min.umd-BwAhpA7x.js";import"./Hms-u2AUyU1C.js";import"./ListeDeroulanteElement-CXmzV-cr.js";import"./sizeTools-DfTC1Dgv.js";import"./time-DMC-jnVL.js";import"./gestionInteractif-DujZpSu8.js";import"./AjouteTableauMathlive-Bz24QHd3.js";import"./colors-bl7PrqSM.js";function ue(){return v.start={init:function(){this.appendDummyInput().appendField("Démonstration"),this.setInputsInline(!0),this.setNextStatement(!0,null),this.setStyle("hat_blocks"),this.setColour(50),this.setTooltip("Démonstration"),this.setHelpUrl("")}},v.reciproque={init:function(){this.appendDummyInput().appendField(new H("Réciproque"),"reciproque"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(30),this.setTooltip(""),this.setHelpUrl("")}},v.thales={init:function(){this.appendDummyInput().appendField(new H("Théorème de Thalès"),"trigo"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(30),this.setTooltip(""),this.setHelpUrl("")}},v.demonstration={init:function(){this.appendStatementInput("Condition").setCheck(null).appendField(new H("Condition"),"Cond"),this.appendStatementInput("Propriété").setCheck(null).appendField(new H("Propriété"),"Prop"),this.appendStatementInput("Conclusion").setCheck(null).appendField(new H("Conclusion"),"Concl"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(150),this.setTooltip(""),this.setHelpUrl("")}},v.triangle_rect_iso={init:function(){this.appendDummyInput().appendField("Le triangle ").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"prepoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"deuxpoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"troispoint"),this.appendDummyInput().appendField("est ").appendField(new g([["rectangle","rect"],["isocèle","iso"]]),"tritype"),this.appendDummyInput().appendField("en").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"trisommet"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.getField("prepoint").setValue("A"),this.getField("deuxpoint").setValue("B"),this.getField("troispoint").setValue("C"),this.getField("trisommet").setValue("A"),this.setColour(80),this.setTooltip(""),this.setHelpUrl("")}},v.pythagore={init:function(){this.appendDummyInput().appendField(new H("Théorème de Pythagore"),"pytha"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(30),this.setTooltip(""),this.setHelpUrl("")}},v.trigonometrie={init:function(){this.appendDummyInput().appendField(new H("Trigonométrie"),"trigo"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(30),this.setTooltip(""),this.setHelpUrl("")}},v.egale_comp={init:function(){this.appendValueInput("op1").setCheck(null),this.appendDummyInput().appendField(new g([["=","equal"],["≠","different"],["≃","approx"],["<","pluspetit"],[">","plusgrand"]]),"op"),this.appendValueInput("op2").setCheck(null),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(180),this.setTooltip(""),this.setHelpUrl("")}},v.egale_2_comp={init:function(){this.appendValueInput("op1").setCheck(null),this.appendDummyInput().appendField(new g([["=","equal"],["≠","different"],["≃","approx"],["<","pluspetit"],[">","plusgrand"]]),"ope1"),this.appendValueInput("op2").setCheck(null),this.appendDummyInput().appendField(new g([["=","equal"],["≠","different"],["≃","approx"],["<","pluspetit"],[">","plusgrand"]]),"ope2"),this.appendValueInput("op3").setCheck(null),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(180),this.setTooltip(""),this.setHelpUrl("")}},v.longueur={init:function(){this.appendDummyInput().appendField(new g([["AB","AB"],["BC","BC"],["CA","CA"],["DE","DE"],["EF","EF"],["FD","FD"]]),"Longueur_triangle"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(190),this.setTooltip(""),this.setHelpUrl("")}},v.carre={init:function(){this.appendValueInput("value").setCheck(null),this.appendDummyInput().appendField("²"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(210),this.setTooltip(""),this.setHelpUrl("")}},v.operation={init:function(){this.appendValueInput("op1").setCheck(null),this.appendDummyInput().appendField(new g([["+","plus"],["-","moins"],["x","multi"],["÷","divise"],["/","fraction"]]),"op"),this.appendValueInput("op2").setCheck(null),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(210),this.setTooltip(""),this.setHelpUrl("")}},v.operation_square_trigo={init:function(){this.appendDummyInput().appendField(new g([["√","racine"],["cos","cos"],["sin","sin"],["tan","tan"],["arccos","arccos"],["arcsin","arcsin"],["arctan","arctan"]]),"op"),this.appendValueInput("value").setCheck(null),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},v.unite={init:function(){this.appendValueInput("value").setCheck(null),this.appendDummyInput().appendField(new g([["cm","cm"],["m","m"],["km","km"],["°","deg"]]),"unite"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},v.textinput={init:function(){this.appendDummyInput().appendField(new le("123"),"NUM"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},v.angle={init:function(){this.appendDummyInput().appendField("Angle:").appendField(new g([["A","A"],["B","B"],["C","C"]]),"premlettre").appendField(new g([["B","B"],["C","C"],["A","A"]]),"deuxlettre").appendField(new g([["C","C"],["A","A"],["B","B"]]),"troislettre"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(190),this.setTooltip(""),this.setHelpUrl("")}},v.secantes={init:function(){this.appendDummyInput().appendField("Les droites (").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d1prepoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d1deuxpoint").appendField(")"),this.appendDummyInput().appendField("et (").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d2prepoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d2deuxpoint").appendField(")"),this.appendDummyInput().appendField("sont sécantes en").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"sommet"),this.getField("d1prepoint").setValue("A"),this.getField("d1deuxpoint").setValue("B"),this.getField("d2prepoint").setValue("C"),this.getField("d2deuxpoint").setValue("D"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(80),this.setTooltip(""),this.setHelpUrl("")}},v.paralleles={init:function(){this.appendDummyInput().appendField("Les droites (").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d1prepoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d1deuxpoint").appendField(")"),this.appendDummyInput().appendField("et (").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d2prepoint").appendField(new g([["A","A"],["B","B"],["C","C"],["D","D"],["E","E"],["F","F"]]),"d2deuxpoint").appendField(")"),this.appendDummyInput().appendField("sont parallèles"),this.getField("d1prepoint").setValue("A"),this.getField("d1deuxpoint").setValue("B"),this.getField("d2prepoint").setValue("C"),this.getField("d2deuxpoint").setValue("D"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(80),this.setTooltip(""),this.setHelpUrl("")}},""}const ae={languageVersion:0,blocks:[{type:"start",id:"j%QdW%xgZNb~-NN/5.va",x:68,y:32,next:{block:{type:"demonstration",id:"4B`MRg:zdav6+,+vuSV`",fields:{Cond:"Condition",Prop:"Propriété",Concl:"Conclusion"},inputs:{Condition:{block:{type:"triangle_rect_iso",id:"m~|V`KGtJ1/^!=_OOZlw",fields:{prepoint:"A",deuxpoint:"B",troispoint:"C",tritype:"rect",trisommet:"A"}}},Propriété:{block:{type:"pythagore",id:")/9+PSXNx$@UmE|fz^nN",fields:{pytha:"Théorème de Pythagore"},next:{block:{type:"egale_comp",id:"J=`(=T~J?R]alt9T]R,l",fields:{op:"equal"},inputs:{op1:{block:{type:"carre",id:"bW^DpCQGPPB8O!AF5woC",inputs:{value:{block:{type:"longueur",id:"=;3RccP%g),.u;*Bspp3",fields:{Longueur_triangle:"BC"}}}}}},op2:{block:{type:"operation",id:"B?19:lYk+:;lLY90piTK",fields:{op:"plus"},inputs:{op1:{block:{type:"carre",id:"T6iox}Y,Xs*tWOPEuY;]",inputs:{value:{block:{type:"longueur",id:"Md5$oK^Zo(Ik.U9uZS,D",fields:{Longueur_triangle:"AB"}}}}}},op2:{block:{type:"carre",id:"1QQ#wDe,=cvbh_b/dL:d",inputs:{value:{block:{type:"longueur",id:",L-_lg-I2?2gb}?0H{d`",fields:{Longueur_triangle:"CA"}}}}}}}}}},next:{block:{type:"egale_comp",id:"@o~N`U8+VPCxGdwcO?J.",fields:{op:"equal"},inputs:{op1:{block:{type:"carre",id:"L9V9evJg;4wM_Yy,r8?o",inputs:{value:{block:{type:"longueur",id:"+ri[HM;pe*InaCw]1x*+",fields:{Longueur_triangle:"AB"}}}}}},op2:{block:{type:"operation",id:"#=P,o4IoxPrE*=vax{8D",fields:{op:"moins"},inputs:{op1:{block:{type:"carre",id:"?nnEkr^N8N~tIn%N.)QI",inputs:{value:{block:{type:"longueur",id:"@B/Wb-Yg6u~^)ysNY$LT",fields:{Longueur_triangle:"BC"}}}}}},op2:{block:{type:"carre",id:"m-[Pa$]-j~TqHolCnrpx",inputs:{value:{block:{type:"longueur",id:"}S^`Nq#EaUNxFBr2ME:~",fields:{Longueur_triangle:"CA"}}}}}}}}}},next:{block:{type:"egale_comp",id:"xNlujFymrb7$fp6md$Ml",fields:{op:"equal"},inputs:{op1:{block:{type:"carre",id:"Wr,9,)5ib$tjqPFFWHOq",inputs:{value:{block:{type:"longueur",id:"`R#0tU`9CT/Iz.tG(@tr",fields:{Longueur_triangle:"AB"}}}}}},op2:{block:{type:"operation",id:"TPf)(;w/?Uf)o(^i7ijb",fields:{op:"moins"},inputs:{op1:{block:{type:"carre",id:"WyM2%6(Q._U*y7fw]#2b",inputs:{value:{block:{type:"textinput",id:"#KQLOegrZ{_FsF*40v?+",fields:{NUM:"10"}}}}}},op2:{block:{type:"carre",id:"|SdHl=:P^{BIj]n#mvOA",inputs:{value:{block:{type:"textinput",id:"GJ.xm+$Avc4ZZOp}r`Hd",fields:{NUM:8}}}}}}}}}},next:{block:{type:"egale_comp",id:"Y;u|7{Og[zLntAnt^Dok",fields:{op:"equal"},inputs:{op1:{block:{type:"carre",id:"oMp-KYkTM}_jfA2)]oLA",inputs:{value:{block:{type:"longueur",id:"/nJ5=W^}Rrvr,QVnj_.i",fields:{Longueur_triangle:"AB"}}}}}},op2:{block:{type:"operation",id:";#RYV}urNL0vqMzWky4k",fields:{op:"moins"},inputs:{op1:{block:{type:"textinput",id:"MxtwQtIzFdosy4;]:RwR",fields:{NUM:100}}},op2:{block:{type:"textinput",id:"BeHI8aHvTi*XM|YX:oC+",fields:{NUM:64}}}}}}},next:{block:{type:"egale_comp",id:"xQ/{N2+(MH{UtS7_fex!",fields:{op:"equal"},inputs:{op1:{block:{type:"carre",id:"qaQEvng.heuqa3H*?`^,",inputs:{value:{block:{type:"longueur",id:"acKWtwMN:=*P(ga|srjw",fields:{Longueur_triangle:"AB"}}}}}},op2:{block:{type:"textinput",id:"ie;zY(%/y[3kQO@=.$C~",fields:{NUM:36}}}},next:{block:{type:"egale_comp",id:"RlvS%(+z5m:Td$hmP}RB",fields:{op:"equal"},inputs:{op1:{block:{type:"longueur",id:"{2@-jr4VZVnQC!,WiGgZ",fields:{Longueur_triangle:"AB"}}},op2:{block:{type:"operation_square_trigo",id:"83.,](s3Kyse.8`}bi`X",fields:{op:"racine"},inputs:{value:{block:{type:"textinput",id:"yk_cCLyIhGA9BqHbLYC3",fields:{NUM:36}}}}}}}}}}}}}}}}}}}}},Conclusion:{block:{type:"egale_comp",id:"6H2-6H^(hH9@t^F{H5cY",fields:{op:"equal"},inputs:{op1:{block:{type:"longueur",id:"`-zYvUV-DJ!.so{Z^`,E",fields:{Longueur_triangle:"AB"}}},op2:{block:{type:"unite",id:"RKu`d(?zgA(b]IlE:tR5",fields:{unite:"cm"},inputs:{value:{block:{type:"textinput",id:"nZ-S{~hYA{}$xmC+#49I",fields:{NUM:6}}}}}}}}}}}}}]},re={blocks:ae},Ve="Calculer une longueur avec le théorème de Pythagore (blockly)",qe=!0,De="custom",Oe="c0f90",Qe={"fr-fr":[],"fr-ch":[]};se(pe);class $e extends te{typeDeQuestion;saveArguments;constructor(){super(),this.nbQuestions=2,this.sup=3,this.sup2=3,this.typeDeQuestion="Calculer :",this.besoinFormulaire2Numerique=["Recherche de côtés ",3,`1 : Hypoténuse
2 : Côtés de l'angle droit
3: Mélange`],this.saveArguments=[]}nouvelleVersion(n){let i;this.sup2===1?i=["BC"]:this.sup2===2?i=["AB","AC"]:i=["AB","BC","AC"];const r=["ABC","DEF"];this.consigne=(this.nbQuestions>1?"Dans chaque cas, calculer":"Calculer")+" la longueur manquante (si nécessaire, l'arrondir au millimètre près).",i=W(i,this.nbQuestions);for(let l=0,a,e,u=0;l<this.nbQuestions&&u<50;){a="",e="";const c=P(0,0),d=P(D(22,50)/10,0),k=Y(d,c,90,D(22,50)/10/V(c,d)),A=j(c,d,k);A.isVisible=!1;const x=J(A,c,D(0,360)),t=x.listePoints[0],p=x.listePoints[1],h=x.listePoints[2],F=Z(p,t,h),m=Math.min(t.x,p.x,h.x)-1,E=Math.min(t.y,p.y,h.y)-1,w=Math.max(t.x,p.x,h.x)+1,b=Math.max(t.y,p.y,h.y)+1,B=r[l%2],I=G(x,B),y=O(p,t),C=O(t,h),L=O(h,p),T=V(t,p,1),N=V(t,h,1),_=V(p,h,1),U=[F,x,I];if(this.typeDeQuestion==="Calculer :"&&i[l]==="AB"?U.push(C,L):this.typeDeQuestion==="Calculer :"&&i[l]==="BC"?U.push(C,y):this.typeDeQuestion==="Calculer :"&&i[l]==="AC"&&U.push(y,L),a+=X({xmin:m,xmax:w,ymin:E,ymax:b,scale:.6,style:"display: block"},U),this.typeDeQuestion==="Calculer :"){let M;i[l]==="AB"?M=Q(t.nom,p.nom,h.nom,2,T,N,_):i[l]==="BC"?M=Q(t.nom,p.nom,h.nom,1,T,N,_):M=Q(t.nom,h.nom,p.nom,2,N,T,_),e=M[0]??"",a+=`<div> 
  <table id="tableBlockly${n}_${l}" style= "height: 100%;width: 100%;border: 0px solid black;border-collapse: collapse;min-height: 500px">
    <tr>
      <td id="blocklyArea${n}_${l}"></td>
    </tr>
  </table></div>

  <div id="blocklyDiv${n}_${l}" style="position: absolute"></div>
  `,e=`<div>
  <table id="tableBlocklyCor${n}_${l}" style= "height: 100%;width: 100%;border: 0px solid black;border-collapse: collapse;min-height: 500px">
    <tr>
      <td id="secondaryArea${n}_${l}"></td>
    </tr>
    <tr>
    </tr>
  </table>
  <div id="secondaryDiv${n}_${l}" style="position: absolute"></div>
  `,a+=`<div class="ml-2 py-2" id="resultatCheckEx${this.numeroExercice}Q${l}"></div>`,a+=ie(this,l)}if(this.questionJamaisPosee(l,d.x,d.y,k.x,k.y)){this.listeQuestions[l]=a,this.listeCorrections[l]=e;const M=B+_.toString()+N.toString()+T.toString();this.saveArguments[l]={nomDuPolygone:B,longueurBC:_,longueurAC:N,longueurAB:T,listeTypeDeQuestion:i[l],key:M},l++}u++}ee(this),ue();const f=this,s=function(){const l=f.nbQuestions,a=n;for(let e=0;e<l;e++)S(e,a,f.saveArguments[e].nomDuPolygone,f.saveArguments[e].longueurBC,f.saveArguments[e].longueurAC,f.saveArguments[e].longueurAB,f.saveArguments[e].listeTypeDeQuestion,f.saveArguments[e].key)},S=function(l,a,e,u,c,d,k,A){const x={kind:"flyoutToolbox",contents:[{kind:"block",type:"start"},{kind:"block",type:"demonstration"},{kind:"block",type:"triangle_rect_iso"},{kind:"block",type:"secantes"},{kind:"block",type:"paralleles"},{kind:"block",type:"pythagore"},{kind:"block",type:"thales"},{kind:"block",type:"trigonometrie"},{kind:"block",type:"reciproque"},{kind:"block",type:"egale_comp"},{kind:"block",type:"longueur"},{kind:"block",type:"angle"},{kind:"block",type:"carre"},{kind:"block",type:"egale_comp",inputs:{op1:{block:{type:"carre",inputs:{value:{block:{type:"longueur"}}}}},op2:{block:{type:"operation",inputs:{op1:{block:{type:"carre"}},op2:{block:{type:"carre"}}}}}}},{kind:"block",type:"operation"},{kind:"block",type:"operation_square_trigo"},{kind:"block",type:"unite"},{kind:"block",type:"textinput"}]},t=document.getElementById("secondaryArea"+a+"_"+l),p=document.getElementById("secondaryDiv"+a+"_"+l),h=q("workspace_sol_"+a+"_"+l+"_"+A);if(p!==null&&p.querySelector(".injectionDiv")&&h)document.dispatchEvent(new window.Event("blocklyEvent",{bubbles:!0}));else if(p!==null){const E=q("workspace_sol_"+a+"_"+l);E&&E.dispose();const w=z(p,{media:"./node_modules/blockly/media/",readOnly:!0,zoom:{controls:!0,wheel:!1,startScale:.8,maxScale:3,minScale:.3,scaleSpeed:1.2,pinch:!1}});w.idkey="workspace_sol_"+a+"_"+l+"_"+A;const b=JSON.parse(JSON.stringify(re));b.blocks.blocks[0].next.block.inputs.Condition.block.fields.prepoint=e[0],b.blocks.blocks[0].next.block.inputs.Condition.block.fields.deuxpoint=e[1],b.blocks.blocks[0].next.block.inputs.Condition.block.fields.troispoint=e[2],b.blocks.blocks[0].next.block.inputs.Condition.block.fields.trisommet=e[0];const B=b.blocks.blocks[0].next.block.inputs.Propriété.block.next.block;B.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],B.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],B.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0];const I=B.next.block,y=I.next.block,C=y.next.block,L=C.next.block,T=L.next.block;k==="AB"?(I.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],I.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],I.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0],y.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],y.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.NUM=o(u,1),y.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.NUM=o(c,1),C.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],C.inputs.op2.block.inputs.op1.block.fields.NUM=o(u**2,2),C.inputs.op2.block.inputs.op2.block.fields.NUM=o(c**2,2),L.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],L.inputs.op2.block.fields.NUM=o(u**2-c**2,2),T.inputs.op1.block.fields.Longueur_triangle=e[0]+e[1],T.inputs.op2.block.inputs.value.block.fields.NUM=o(u**2-c**2,2),b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op1.block.fields.Longueur_triangle=e[0]+e[1],b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op2.block.inputs.value.block.fields.NUM=o(d,2),o(Math.sqrt(u**2-c**2),1)===o(Math.sqrt(u**2-c**2),5)?b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="equal":b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="approx"):k==="AC"?(I.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0],I.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],I.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.Longueur_triangle=e[0]+e[1],y.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0],y.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.NUM=o(u,1),y.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.NUM=o(d,1),C.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0],C.inputs.op2.block.inputs.op1.block.fields.NUM=o(u**2,2),C.inputs.op2.block.inputs.op2.block.fields.NUM=o(d**2,2),L.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[2]+e[0],L.inputs.op2.block.fields.NUM=o(u**2-d**2,2),T.inputs.op1.block.fields.Longueur_triangle=e[2]+e[0],T.inputs.op2.block.inputs.value.block.fields.NUM=o(u**2-d**2,2),b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op1.block.fields.Longueur_triangle=e[2]+e[0],b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op2.block.inputs.value.block.fields.NUM=o(c,2),o(Math.sqrt(u**2-d**2),1)===o(Math.sqrt(u**2-d**2),5)?b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="equal":b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="approx"):(B.next.block=y,y.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],y.inputs.op2.block.fields.op="plus",y.inputs.op2.block.inputs.op1.block.inputs.value.block.fields.NUM=o(d,1),y.inputs.op2.block.inputs.op2.block.inputs.value.block.fields.NUM=o(c,1),C.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],C.inputs.op2.block.fields.op="plus",C.inputs.op2.block.inputs.op1.block.fields.NUM=o(d**2,2),C.inputs.op2.block.inputs.op2.block.fields.NUM=o(c**2,2),L.inputs.op1.block.inputs.value.block.fields.Longueur_triangle=e[1]+e[2],L.inputs.op2.block.fields.NUM=o(d**2+c**2,2),T.inputs.op1.block.fields.Longueur_triangle=e[1]+e[2],T.inputs.op2.block.inputs.value.block.fields.NUM=o(d**2+c**2,2),b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op1.block.fields.Longueur_triangle=e[1]+e[2],b.blocks.blocks[0].next.block.inputs.Conclusion.block.inputs.op2.block.inputs.value.block.fields.NUM=o(u,2),o(Math.sqrt(d**2+c**2),1)===o(Math.sqrt(d**2+c**2),5)?b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="equal":b.blocks.blocks[0].next.block.inputs.Conclusion.block.fields.op="approx"),oe.workspaces.load(b,w);const N=function(){if(t===null)return;let _=t,U=0,M=0,K=0;do U+=_.offsetLeft,M+=_.offsetTop,_=_.offsetParent,K++;while(_&&K<2);p.style.left=U+"px",p.style.top=M+"px",p.style.width=t.offsetWidth+"px",p.style.height=t.offsetHeight+"px",R(w)};N(),window.addEventListener("resize",N,!1)}const F=document.getElementById("blocklyArea"+a+"_"+l),m=document.getElementById("blocklyDiv"+a+"_"+l);if(m!==null&&m.querySelector(".injectionDiv"))setTimeout(function(){document.dispatchEvent(new window.Event("blocklyEvent",{bubbles:!0}))},1e3);else if(m!==null){const E=q("workspace_quest_"+a+"_"+l);E&&E.dispose();const w=z(m,{media:"./node_modules/blockly/media/",toolbox:x,collapse:!1,comments:!1,disable:!1,maxBlocks:1/0,trashcan:!1,horizontalLayout:!1,toolboxPosition:"start",css:!0,rtl:!1,scrollbars:!1,sounds:!1,oneBasedIndex:!1,zoom:{controls:!0,wheel:!1,startScale:.8,maxScale:3,minScale:.3,scaleSpeed:1.2,pinch:!1}});w.idkey="workspace_quest_"+a+"_"+l+"_"+A;const b=function(){let B=F,I=0,y=0,C=0;do I+=B.offsetLeft,y+=B.offsetTop,B=B.offsetParent,C++;while(B&&C<2);m.style.left=I+"px",m.style.top=y+"px",m.style.width=F.offsetWidth+"px",m.style.height=F.offsetHeight+"px",R(w)};window.addEventListener("resize",b,!1),document.addEventListener("blocklyEvent",b,!1),b()}};document.addEventListener("exercicesAffiches",s)}correctionInteractive=n=>{if(n===void 0)return"";this.answers===void 0&&(this.answers={});let i="OK";const r=document.querySelector(`#resultatCheckEx${this.numeroExercice}Q${n}`),f=document.querySelector(`#feedbackEx${this.numeroExercice}Q${n}`);r.innerHTML="";let s="";const l=q("workspace_quest_"+this.numeroExercice+"_"+n).getBlocksByType("start")[0];if(!l)return s+='Manque le bloc "démonstration"<br>',r.innerHTML="☹️",i="KO",f&&(f.innerHTML=s),i;const a=l.getNextBlock();if(!a)return s+='Manque le bloc "Condition Propriété Conclusion"<br>',r.innerHTML="☹️",i="KO",f&&(f.innerHTML=s),f.style.display="block",i;const e=a.getInputTargetBlock("Condition");e?(e.type==="triangle_rect_iso"&&e.getFieldValue("tritype")==="rect"?s+="Condition: le bloc triangle rectangle défini<br>":(s+="Condition: le bloc triangle rectangle mal défini<br>",r.innerHTML="☹️",i="KO"),this.saveArguments[n].nomDuPolygone.includes(e.getFieldValue("prepoint"))&&this.saveArguments[n].nomDuPolygone.includes(e.getFieldValue("deuxpoint"))&&this.saveArguments[n].nomDuPolygone.includes(e.getFieldValue("troispoint"))&&this.saveArguments[n].nomDuPolygone.includes(e.getFieldValue("troispoint"))?s+="Condition: le bloc triangle rectangle bien défini<br>":(s+="Condition: le bloc triangle rectangle avec des points mal définis<br>",r.innerHTML="☹️",i[0]="KO")):(s+="Pas de condition définie<br>",r.innerHTML="☹️",i="KO");const u=this.saveArguments[n].longueurBC,c=this.saveArguments[n].longueurAB,d=this.saveArguments[n].longueurAC,k=this.saveArguments[n].nomDuPolygone,A=a.getInputTargetBlock("Propriété");if(!A)s+="Pas de propriété définie<br>",r.innerHTML="☹️",i="KO";else{A.type==="pythagore"?s+="Propriété: le bloc Pythagore défini<br>":(s+="Propriété: le bloc Pythagore absent<br>",r.innerHTML="☹️",i="KO");const t=A.getNextBlock();t&&t.type==="egale_comp"&&t.getFieldValue("op")==="equal"&&t.getInputTargetBlock("op1")&&t.getInputTargetBlock("op1")?.type==="carre"&&t.getInputTargetBlock("op1")?.getInputTargetBlock("value")&&t.getInputTargetBlock("op1")?.getInputTargetBlock("value")?.type==="longueur"&&t.getInputTargetBlock("op1")?.getInputTargetBlock("value")?.getFieldValue("Longueur_triangle")===k[1]+k[2]?s+="Propriété: Egalité de Pythagore : bloc correct à gauche<br>":(s+="Propriété: Egalité de Pythagore : bloc incorrecte à gauche<br>",r.innerHTML="☹️",i="KO"),t&&t.type==="egale_comp"&&t.getFieldValue("op")==="equal"&&t.getInputTargetBlock("op2")&&t.getInputTargetBlock("op2")?.type==="operation"&&t.getInputTargetBlock("op2")?.getFieldValue("op")==="plus"&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")?.type==="carre"&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")?.getInputTargetBlock("value")&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")?.getInputTargetBlock("value")?.type==="longueur"&&(t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")?.getInputTargetBlock("value")?.getFieldValue("Longueur_triangle")===k[0]+k[1]||t.getInputTargetBlock("op2")?.getInputTargetBlock("op1")?.getInputTargetBlock("value")?.getFieldValue("Longueur_triangle")===k[2]+k[0])&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")?.type==="carre"&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")?.getInputTargetBlock("value")&&t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")?.getInputTargetBlock("value")?.type==="longueur"&&(t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")?.getInputTargetBlock("value")?.getFieldValue("Longueur_triangle")===k[0]+k[1]||t.getInputTargetBlock("op2")?.getInputTargetBlock("op2")?.getInputTargetBlock("value")?.getFieldValue("Longueur_triangle")===k[2]+k[0])?s+="Propriété: Egalité de Pythagore : bloc correct à droite<br>":s+="Propriété: Egalité de Pythagore : bloc incorrect à droite<br>";let p=t?.getNextBlock();for(;p;){const[h,F]=this.racineCarreSearch(p,k,this.saveArguments[n].listeTypeDeQuestion,u,d,c);if(p=p.getNextBlock(),h){s+=F;break}if(!p){s+=F,r.innerHTML="☹️",i="KO";break}}}const x=a.getInputTargetBlock("Conclusion");if(!x)s+="Pas de conclusion définie<br>",r.innerHTML="☹️",i="KO";else{let t="",p="",h=c.toString();this.saveArguments[n].listeTypeDeQuestion==="AB"?(p=k[0]+k[1],h=o(c),o(Math.sqrt(u**2-d**2),1)===o(Math.sqrt(u**2-d**2),5)?t="equal":t="approx"):this.saveArguments[n].listeTypeDeQuestion==="AC"?(p=k[2]+k[0],h=o(d),o(Math.sqrt(u**2-c**2),1)===o(Math.sqrt(u**2-c**2),5)?t="equal":t="approx"):(p=k[1]+k[2],h=o(u),o(Math.sqrt(c**2+d**2),1)===o(Math.sqrt(c**2+d**2),5)?t="equal":t="approx"),x.type==="egale_comp"||(s+="Conclusion: le bloc conclusion avec le mauvais block<br>",r.innerHTML="☹️",i="KO"),x.type==="egale_comp"&&x.getFieldValue("op")===t?s+="Conclusion: le bloc conclusion défini avec le bon signe<br>":x.type==="egale_comp"&&(s+="Conclusion: le bloc conclusion défini avec le mauvais signe<br>",r.innerHTML="☹️",i="KO");const F=x.getInputTargetBlock("op1");F&&F.type==="longueur"&&F.getFieldValue("Longueur_triangle")===p?s+="Conclusion: le bloc conclusion défini avec le bon segment<br>":(s+="Conclusion: le bloc conclusion défini avec le mauvais segment<br>",r.innerHTML="☹️",i="KO");const m=x.getInputTargetBlock("op2");m&&m.type==="unite"&&m.getFieldValue("unite")==="cm"?s+="Conclusion: le bloc conclusion défini avec la bonne unité<br>":(s+="Conclusion: le bloc conclusion défini avec la mauvaise unité<br>",r.innerHTML="☹️",i[0]="KO"),m&&m.getInputTargetBlock("value")&&m.getInputTargetBlock("value").type==="textinput"&&m.getInputTargetBlock("value").getFieldValue("NUM")===h?s+="Conclusion: le bloc conclusion défini avec la bonne longueur<br>":(s+="Conclusion: le bloc conclusion défini avec la mauvaise longueur<br>",r.innerHTML="☹️",i="KO")}return i==="OK"&&(r.innerHTML="😎"),f&&(f.innerHTML=s),i};racineCarreSearch(n,i,r,f,s,S){let l="",a=!0,e="",u="";return r==="AB"?(e=o(f**2-s**2),u=i[0]+i[1]):r==="BC"?(e=o(s**2+s**2),u=i[1]+i[2]):(e=o(f**2-S**2),u=i[2]+i[0]),n&&n.type==="egale_comp"&&n.getFieldValue("op")==="equal"&&n.getInputTargetBlock("op1")?.type==="longueur"&&n.getInputTargetBlock("op1")?.getFieldValue("Longueur_triangle")===u?l+="Propriété: bloc racine carré correct à gauche<br>":(a=!1,l+="Propriété: bloc racine carré incorrect à gauche<br>"),n&&n.type==="egale_comp"&&n.getFieldValue("op")==="equal"&&n.getInputTargetBlock("op2")?.type==="operation_square_trigo"&&n.getInputTargetBlock("op2")?.getFieldValue("op")==="racine"&&n.getInputTargetBlock("op2")?.getInputTargetBlock("value")?.getFieldValue("NUM")===e?l+="Propriété: bloc racine carré correct à droite<br>":(l+="Propriété: bloc racine carré incorrect à droite<br>",a=!1),[a,l]}}function q($){const n=ne.getAll();for(let i=0;i<n.length;i++){const r=n[i];if(r.idkey&&r.idkey.startsWith($))return r}return null}export{$e as default,qe as interactifReady,De as interactifType,Qe as refs,Ve as titre,Oe as uuid};
