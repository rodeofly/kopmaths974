import{E as h}from"./Exercice-DtXhjCyI.js";import{D as l,o as p,l as d}from"./embellissements-BYV7mIDn.js";import{P as f}from"./pyramide-Dm6EiH5u.js";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"katex";import"mathjs";import"crypto-js";import"seedrandom";import"decimal.js";import"earcut";import"roughjs";const V="Générateur de pyramides",M={"fr-fr":["P018"],"fr-ch":[]},N="75f89";class k extends h{constructor(){super(),this.nbQuestions=1,this.nbQuestionsModifiable=!1,this.besoinFormulaireNumerique=["Type de pyramide",2,`1 : Pyramide additive
 2 : Pyramide multiplicative`],this.besoinFormulaire2Texte=["Valeur minimale de base",""],this.besoinFormulaire3Texte=["Valeur maximale de base",""],this.besoinFormulaire4Numerique=["Nombre d'étages",8],this.sup4=3,this.sup3=10,this.sup2=1,this.sup="+"}nouvelleVersion(){let t="+";const r=this.sup4;let a="",o="";switch(this.sup){case 2:t="*";break;case 1:default:t="+";break}const e=new f({operation:t,nombreEtages:r,rangeData:[parseInt(this.sup2),parseInt(this.sup3)],exclusions:[0],fractionOn:!1});e.aleatoirise();const n=e.representeMoi(0,0);for(let s=r;s>0;s--)for(let i=0;i<s;i++)e.isVisible[s-1][i]=!0;const m=e.representeMoi(0,0),u=Object.assign({},l(n),{pixelsParCm:20,scale:1,mainlevee:!1}),c=Object.assign({},l(m),{pixelsParCm:20,scale:1,mainlevee:!1});a+=p(u,n),o+=p(c,m),this.listeQuestions.push(a),this.listeCorrections.push(o),d(this)}}export{k as default,M as refs,V as titre,N as uuid};
