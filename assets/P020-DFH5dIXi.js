import{am as b,a as m,y as g,l as x}from"./embellissements-BYV7mIDn.js";import{E as C}from"./Exercice-DtXhjCyI.js";import{t as q}from"./tableau-nuZmVTHQ.js";import"mathjs";import"decimal.js";import"katex";import"earcut";import"roughjs";import"./exerciseMethods-CtbYPwln.js";import"./index-BUDQz6-w.js";import"crypto-js";import"seedrandom";import"./AjouteTableauMathlive-Bz24QHd3.js";import"./tableauMathlive-xx-nDjq0.js";import"./canStore-DaSrd7sp.js";import"./generalStore-C3E9FHtR.js";import"./comparisonFunctions-B45ZZ3C7.js";import"./compute-engine.min.umd-BwAhpA7x.js";import"./Hms-u2AUyU1C.js";import"./ListeDeroulanteElement-CXmzV-cr.js";import"./sizeTools-DfTC1Dgv.js";import"./time-DMC-jnVL.js";/* empty css                   */const R="Encodeur de texte",U={"fr-fr":["P020"],"fr-ch":[]},W="de353",v=Array.from("-xçwjè,k~:aq«rlgdmftbéocsà.êeipzhu'ynvî»â!"),A=["\\times","1","2","3","4","5","6","7","8","9","10"];function j(h,r){const p=r.entries();for(const o of p)if(o[1]===h)return o[0];return NaN}class X extends C{besoinCorrection;type;constructor(r="générateur"){super(),this.consigne="Choisir un texte à encoder dans le formulaire en paramètre.",this.besoinFormulaireTexte=["Texte à encoder (liste de mots ou de phrases séparés par /",""],this.besoinFormulaire2CaseACocher=["Grille différente pour chaque morceau",!1],this.sup="mathématiques",this.sup2=!1,this.nbQuestions=1,this.besoinCorrection=!1,this.type=r}nouvelleVersion(){const r=["1","2","3","4","5","6","7","8","9","10"],p=["mathématiques","diviseur","multiple","médiatrice","milieu","parallèle","perpendiculaire","multiplication","addition","soustraction","division","addition","cercle","histogramme","diagramme","numération","fraction","égalité","propriété","contre-exemple"],o=["Les mathématiques/c'est fantastique","multiplier et diviser/se fait avant/additionner ou soustraire","être supérieur/à un nombre signifie/être plus grand que ce nombre","Il faut toujours/vérifier la cohérence/de ses résultats","Pour tracer des/droites ou des segments/on utilise une règle","Pour tracer des/droites perpendiculaires/utilise ton équerre"];if(this.sup3=b(1,3,this.sup3,1),this.type==="exo")switch(this.sup3){case 1:this.sup=m(p);break;case 2:this.sup=m(o).replaceAll("/"," "),this.sup2=!1;break;case 3:this.sup=m(o),this.sup2=!0;break}const s=this.sup.replaceAll(" ","~").split("/");this.nbQuestions=s.length;for(let e=0;e<this.nbQuestions;e++)s[e]=s[e].toLowerCase();for(let e=0,i,c,d,f=0;e<this.nbQuestions&&f<50;){const a=[],n=new Map;if(e===0||this.sup2){c=0,d=g(v);for(let t=0;t<10;t++){a[t]=[];for(let u=0,l;u<10;u++)l=(t+1)*(u+1),n.has(l)||(n.set(l,d[c]),c++),a[t][u]=String(n.get(l))}i=`${q(A,r,a.flat().map(t=>`\\large \\textbf{${t}}`),1.3,!1,this.numeroExercice,e,!1)}`}else i="";i+="<br><br>À l'aide de la table ci-dessus, décoder le message suivant :<br>";for(let t=0;t<s[e].length;t++)i+=`${j(s[e][t],n)} `;i+="<br><br>",this.questionJamaisPosee(e,s[e],a.flat().join(""))&&(this.listeQuestions[e]=i,this.listeCorrections[e]=s[e].replaceAll("~"," ").replaceAll("/"," "),e++),f++}x(this)}}export{X as default,U as refs,R as titre,W as uuid};
